{"version":3,"file":"static/js/983.347d721a.chunk.js","mappings":"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","sources":["pages/directories/geography/countries/api/geographyCountries.api.ts","pages/directories/geography/countries/lib/getCountriesColumns.tsx","pages/directories/geography/countries/lib/getCreatedFields.tsx","pages/directories/geography/countries/lib/useCountryActions.ts","pages/directories/geography/countries/index.tsx"],"sourcesContent":["import { commonApi } from \"@store/common.api\"\r\nimport { GeographyCountry } from \"../models\"\r\n\r\nexport const geographyCountriesApi = commonApi.injectEndpoints({\r\n    endpoints: build => ({\r\n        fetchCountries: build.query<GeographyCountry[], string>({\r\n            query: () => ({\r\n                url: '/directoriesGeographyCountries',\r\n            }),\r\n            providesTags: [{ type: 'GeographyCountries', id: 'LIST' }],\r\n        }),\r\n        createCountry: build.mutation<GeographyCountry, Omit<GeographyCountry, 'id'>>({\r\n            query: (created) => ({\r\n                url: '/directoriesGeographyCountries',\r\n                method: 'POST',\r\n                body: created,\r\n            }),\r\n            //pessimistic update - after fulfilled query\r\n            onQueryStarted(_, { dispatch, queryFulfilled }) {\r\n                queryFulfilled\r\n                    .then(({ data }) => {\r\n                        dispatch(\r\n                            geographyCountriesApi.util.updateQueryData('fetchCountries', '', draft => {\r\n                                draft.push(data)\r\n                            })\r\n                        )\r\n                    })\r\n            },\r\n        }),\r\n        updateCountry: build.mutation<GeographyCountry, GeographyCountry>({\r\n            query: (updated) => ({\r\n                url: `/directoriesGeographyCountries/${updated.id}`,\r\n                method: 'PUT',\r\n                body: updated,\r\n            }),\r\n            //pessimistic update - after fulfilled query\r\n            onQueryStarted(_, { dispatch, queryFulfilled }) {\r\n                queryFulfilled\r\n                    .then(({ data }) => {\r\n                        dispatch(\r\n                            geographyCountriesApi.util.updateQueryData('fetchCountries', '', draft => {\r\n                                let founded = draft.find(founded => founded.id === data.id)\r\n                                !!founded && Object.assign(founded, data)\r\n                            })\r\n                        )\r\n                    })\r\n            },\r\n        }),\r\n        deleteCountry: build.mutation<{}, number>({\r\n            query: (id) => ({\r\n                url: `/directoriesGeographyCountries/${id}`,\r\n                method: 'DELETE',\r\n            }),\r\n            //refetch\r\n            invalidatesTags: [{ type: 'GeographyCountries', id: 'LIST' }],\r\n        }),\r\n    }),\r\n})\r\n\r\nexport const {\r\n    useCreateCountryMutation,\r\n    useDeleteCountryMutation,\r\n    useFetchCountriesQuery,\r\n    useUpdateCountryMutation,\r\n} = geographyCountriesApi","import moment from \"moment\"\r\nimport { CustomColumnType } from \"@components/smartTable/lib/types\"\r\nimport { GeographyCountry } from \"../models\"\r\n\r\nconst getCountriesColumns = (): CustomColumnType<GeographyCountry>[] => ([\r\n    {\r\n        title: 'Название',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        customFilter: 'search',\r\n        sorter: (a, b) => a.name.localeCompare(b.name),\r\n        editable: true,\r\n        width: 300,\r\n    },\r\n    {\r\n        title: 'Код',\r\n        dataIndex: 'code',\r\n        key: 'code',\r\n        customFilter: 'search',\r\n        align: 'center',\r\n        sorter: (a, b) => a.code.localeCompare(b.code),\r\n        editable: true,\r\n        width: 120,\r\n    },\r\n    {\r\n        title: 'Кем создано',\r\n        dataIndex: ['created_by', 'name'],\r\n        key: 'created_by',\r\n        customFilter: 'search',\r\n        align: 'center',\r\n        sorter: (a, b) => a.created_by.name.localeCompare(b.created_by.name),\r\n        width: 150,\r\n        responsive: ['xl'],\r\n        editable: false,\r\n    },\r\n    {\r\n        title: 'Когда создано',\r\n        dataIndex: 'created_date',\r\n        key: 'created_date',\r\n        customFilter: 'date-picker',\r\n        render: (value) => (!!value ? moment(value).format('L') : '-'),\r\n        sorter: (a, b) => moment(a.created_date).diff(b.created_date),\r\n        align: 'center',\r\n        width: 150,\r\n        responsive: ['xl'],\r\n        editable: false,\r\n    },\r\n    {\r\n        title: 'Кем изменено',\r\n        dataIndex: ['updated_by', 'name'],\r\n        key: 'updated_by',\r\n        customFilter: 'search',\r\n        align: 'center',\r\n        sorter: (a, b) => a.updated_by?.name.localeCompare(b.updated_by?.name ?? '') ?? 0,\r\n        render: (value) => value ?? '-',\r\n        width: 150,\r\n        responsive: ['xxl'],\r\n        editable: false,\r\n    },\r\n    {\r\n        title: 'Когда изменено',\r\n        dataIndex: 'updated_date',\r\n        key: 'updated_date',\r\n        customFilter: 'date-picker',\r\n        render: (value) => (!!value ? moment(value).format('L LT') : '-'),\r\n        sorter: (a, b) => moment(a.updated_date).diff(b.updated_date),\r\n        align: 'center',\r\n        width: 150,\r\n        responsive: ['xxl'],\r\n        editable: false,\r\n    },\r\n])\r\n\r\nexport default getCountriesColumns","import React from 'react'\r\nimport { FormItemProps, Input } from 'antd'\r\n\r\nconst getCreatedFields = (name: number): (FormItemProps & { key: React.Key })[] => [\r\n    {\r\n        key: \"name\",\r\n        name: [name, 'name'],\r\n        style: { flexGrow: 1 },\r\n        rules: [{ required: true, message: 'Введите название' }],\r\n        children: <Input placeholder=\"Название\" />\r\n    },\r\n    {\r\n        key: \"code\",\r\n        name: [name, 'code'],\r\n        rules: [{ required: true, message: 'Введите код' }],\r\n        children: <Input placeholder=\"Код\" />\r\n    },\r\n]\r\n\r\nexport default getCreatedFields","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useCallback } from \"react\"\r\nimport moment from \"moment\"\r\nimport { FormInstance, message } from \"antd\"\r\nimport { MutationDefinition } from \"@reduxjs/toolkit/dist/query\"\r\nimport { MutationTrigger } from \"@reduxjs/toolkit/dist/query/react/buildHooks\"\r\nimport { User } from \"@models/user\"\r\nimport { CreateCountryValues, GeographyCountry } from \"../models\"\r\nimport { BaseDirectoryFields } from \"@models/base\"\r\n\r\ninterface Props {\r\n    user: User\r\n    createCountry: MutationTrigger<MutationDefinition<Omit<GeographyCountry, \"id\">, any, any, GeographyCountry, string>>\r\n    deleteCountry: MutationTrigger<MutationDefinition<number, any, any, {}, string>>\r\n    updateCountry: MutationTrigger<MutationDefinition<GeographyCountry, any, any, GeographyCountry, string>>\r\n    editForm: FormInstance<any>\r\n    hideCreateModal: () => void\r\n    cancelEdit: () => void\r\n    selectedRowKeys: React.Key[]\r\n    setSelectedRowKeys: React.Dispatch<React.SetStateAction<React.Key[]>>\r\n}\r\n\r\nconst useCountryActions = ({\r\n    user,\r\n    createCountry,\r\n    deleteCountry,\r\n    updateCountry, \r\n    editForm, \r\n    hideCreateModal, \r\n    cancelEdit, \r\n    selectedRowKeys, \r\n    setSelectedRowKeys\r\n}: Props) => {\r\n    //Creating\r\n    const onCreate = useCallback((data: Omit<GeographyCountry, 'id'>) => \r\n        createCountry(data), [])\r\n    const onGroupCreate = useCallback(async (values: CreateCountryValues) => {\r\n        if (!!values.countries?.length) {\r\n            const initialData: Omit<BaseDirectoryFields, 'id' | 'name'> = {\r\n                type: \"geographyCountries\",\r\n                deleted: false,\r\n                created_by: user,\r\n                created_date: moment().toISOString(),\r\n                updated_by: null,\r\n                updated_date: null\r\n            }\r\n            return Promise.all(values.countries.map((country) => onCreate({ ...initialData, ...country }).unwrap()))\r\n                .then(() => {\r\n                    message.success('Данные успешно сохранены')\r\n                    hideCreateModal()\r\n                })\r\n        }\r\n    }, [user])\r\n\r\n    //Updating\r\n    const onUpdate = useCallback(async (record: GeographyCountry) => {\r\n        try {\r\n            await editForm.validateFields()\r\n            const data: GeographyCountry = { ...record, ...editForm.getFieldsValue() }\r\n            data.updated_by = user\r\n            data.updated_date = moment().toISOString()\r\n            await updateCountry(data).unwrap()\r\n            message.success('Изменение успешно')\r\n            cancelEdit()\r\n        } catch {}\r\n    }, [user])\r\n\r\n    //Deleting\r\n    const onDelete = useCallback((id: number) => deleteCountry(id), []) \r\n    const onGroupDelete = useCallback(async () => {\r\n        Promise.all(selectedRowKeys.map((id) => onDelete(Number(id)).unwrap()))\r\n            .then(() => {\r\n                message.success(`Удаление успешно`)\r\n                setSelectedRowKeys([])\r\n            })\r\n    }, [selectedRowKeys])\r\n\r\n    return {\r\n        onGroupCreate,\r\n        onUpdate,\r\n        onGroupDelete\r\n    }\r\n}\r\n\r\nexport default useCountryActions","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useCallback, useMemo, } from 'react'\r\nimport { Alert, Form, Modal } from 'antd'\r\nimport {\r\n    useCreateCountryMutation,\r\n    useDeleteCountryMutation,\r\n    useFetchCountriesQuery,\r\n    useUpdateCountryMutation\r\n} from './api/geographyCountries.api'\r\n//lib & ui\r\nimport { CreateCountryValues, GeographyCountry } from './models'\r\nimport getCountriesColumns from './lib/getCountriesColumns'\r\nimport getCreatedFields from './lib/getCreatedFields'\r\nimport useCountryActions from './lib/useCountryActions'\r\n//components\r\nimport { PageWrapper } from '@components/templates/PageWrapper'\r\nimport PageToolbar from '@components/templates/PageToolbar'\r\nimport SmartTable from '@components/smartTable'\r\nimport DynamicForm from '@components/templates/DynamicForm'\r\nimport { EditableCell } from '@components/smartTable/ui'\r\nimport { getEditColumns } from '@components/smartTable/lib/getEditColumns'\r\n//hooks\r\nimport useWindowSize from '@utils/hooks/useWindowSize'\r\nimport { useUser } from '@utils/hooks/useUser'\r\nimport { useTable } from '@utils/hooks/useTable'\r\nimport { useModal } from '@utils/hooks/useModal'\r\nimport { useEditRow } from '@utils/hooks/useEditRow'\r\n\r\nconst Page: React.FC = () => {\r\n    const user = useUser()\r\n    const { width, height } = useWindowSize()\r\n\r\n    //Queries & mutations\r\n    const { data, isLoading, isFetching, error } = useFetchCountriesQuery('')\r\n    const [updateCountry, { isLoading: updateLoading, error: updateError }] = useUpdateCountryMutation()\r\n    const [createCountry, { isLoading: createLoading, error: createError }] = useCreateCountryMutation()\r\n    const [deleteCountry, { isLoading: deleteLoading, error: deleteError }] = useDeleteCountryMutation()\r\n    const dataError = error || updateError || createError || deleteError\r\n\r\n    //Creating modal\r\n    const [createModalVisible, showCreateModal, hideCreateModal] = useModal()\r\n    const createFields = useCallback(getCreatedFields, [])\r\n\r\n    //Table\r\n    const {\r\n        rowSelection, \r\n        selectedRowKeys, \r\n        setSelectedRowKeys,\r\n    } = useTable<GeographyCountry>()\r\n\r\n    const { edit, editForm, editingKey, isEditing, cancelEdit } = useEditRow<GeographyCountry>()\r\n\r\n    const scroll = useMemo(() => ({ y: height - 260 }), [height])\r\n    const pagination = useMemo(() => ({ onChange: cancelEdit, showSizeChanger: true }), [])\r\n    const components = useMemo(() => ({ body: { cell: EditableCell, } }), [])\r\n\r\n    const { onUpdate, onGroupCreate, onGroupDelete } = useCountryActions({\r\n        user, editForm, cancelEdit, hideCreateModal, selectedRowKeys, setSelectedRowKeys,\r\n        createCountry, deleteCountry, updateCountry\r\n    })\r\n\r\n    //Columns & data\r\n    const columns = useMemo(() =>\r\n        getEditColumns({\r\n            columns: getCountriesColumns(),\r\n            cancelEdit,\r\n            edit,\r\n            editingKey,\r\n            isEditing,\r\n            loading: updateLoading,\r\n            onSave: onUpdate\r\n        }), [editingKey])\r\n    const dataSource = useMemo(() => data ?? [], [data])\r\n\r\n    return (\r\n        <PageWrapper>\r\n            <section className='main-section'>\r\n                <PageToolbar\r\n                    deleteDisable={!selectedRowKeys.length}\r\n                    deleteLoading={deleteLoading}\r\n                    onOpenCreate={showCreateModal}\r\n                    onDelete={onGroupDelete}\r\n                />\r\n                <Form form={editForm} component={false}>\r\n                    <SmartTable<GeographyCountry>\r\n                        components={components}\r\n                        columns={columns}\r\n                        dataSource={dataSource}\r\n                        rowSelection={rowSelection}\r\n                        loading={isFetching || isLoading}\r\n                        scroll={scroll}\r\n                        pagination={pagination}\r\n                    />\r\n                </Form>\r\n                {(!!dataError) && <Alert message={JSON.stringify(dataError)} type=\"error\"/>}\r\n            </section>\r\n            <Modal\r\n                open={createModalVisible}\r\n                title=\"Создать\"\r\n                centered\r\n                footer={null}\r\n                onCancel={hideCreateModal}\r\n            >\r\n                <DynamicForm<CreateCountryValues>\r\n                    name='countries'\r\n                    getfields={createFields}\r\n                    loading={createLoading}\r\n                    error={createError}\r\n                    onFinish={onGroupCreate}\r\n                    width={width}\r\n                />\r\n            </Modal>\r\n        </PageWrapper>\r\n    )\r\n}\r\n\r\nexport default Page"],"names":["geographyCountriesApi","commonApi","endpoints","build","fetchCountries","query","url","providesTags","type","id","createCountry","mutation","created","method","body","onQueryStarted","_","dispatch","queryFulfilled","then","data","util","updateQueryData","draft","push","updateCountry","updated","founded","find","Object","assign","deleteCountry","invalidatesTags","useCreateCountryMutation","useDeleteCountryMutation","useFetchCountriesQuery","useUpdateCountryMutation","title","dataIndex","key","customFilter","sorter","a","b","name","localeCompare","editable","width","align","code","created_by","responsive","render","value","moment","format","created_date","diff","updated_by","updated_date","style","flexGrow","rules","required","message","children","placeholder","user","editForm","hideCreateModal","cancelEdit","selectedRowKeys","setSelectedRowKeys","onCreate","useCallback","onGroupCreate","values","countries","length","initialData","deleted","toISOString","Promise","all","map","country","unwrap","onUpdate","record","validateFields","getFieldsValue","onDelete","onGroupDelete","Number","useUser","useWindowSize","height","isLoading","isFetching","error","updateLoading","updateError","createLoading","createError","deleteLoading","deleteError","dataError","useModal","createModalVisible","showCreateModal","createFields","getCreatedFields","useTable","rowSelection","useEditRow","edit","editingKey","isEditing","scroll","useMemo","y","pagination","onChange","showSizeChanger","components","cell","EditableCell","useCountryActions","columns","getEditColumns","getCountriesColumns","loading","onSave","dataSource","PageWrapper","className","PageToolbar","deleteDisable","onOpenCreate","form","component","JSON","stringify","open","centered","footer","onCancel","DynamicForm","getfields","onFinish"],"sourceRoot":""}