{"version":3,"file":"static/js/258.41e6c3c9.chunk.js","mappings":"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","sources":["pages/directories/geography/countries/api/geographyCountries.api.ts","pages/directories/geography/regions/api/geographyRegions.api.ts","pages/directories/geography/regions/lib/getRegionsColumns.tsx","pages/directories/geography/regions/lib/getCreatedFields.tsx","pages/directories/geography/regions/lib/useRegionActions.ts","pages/directories/geography/regions/index.tsx"],"sourcesContent":["import { commonApi } from \"@store/common.api\"\r\nimport { GeographyCountry } from \"../models\"\r\n\r\nexport const geographyCountriesApi = commonApi.injectEndpoints({\r\n    endpoints: build => ({\r\n        fetchCountries: build.query<GeographyCountry[], string>({\r\n            query: () => ({\r\n                url: '/directoriesGeographyCountries',\r\n            }),\r\n            providesTags: [{ type: 'GeographyCountries', id: 'LIST' }],\r\n        }),\r\n        createCountry: build.mutation<GeographyCountry, Omit<GeographyCountry, 'id'>>({\r\n            query: (created) => ({\r\n                url: '/directoriesGeographyCountries',\r\n                method: 'POST',\r\n                body: created,\r\n            }),\r\n            //pessimistic update - after fulfilled query\r\n            onQueryStarted(_, { dispatch, queryFulfilled }) {\r\n                queryFulfilled\r\n                    .then(({ data }) => {\r\n                        dispatch(\r\n                            geographyCountriesApi.util.updateQueryData('fetchCountries', '', draft => {\r\n                                draft.push(data)\r\n                            })\r\n                        )\r\n                    })\r\n            },\r\n        }),\r\n        updateCountry: build.mutation<GeographyCountry, GeographyCountry>({\r\n            query: (updated) => ({\r\n                url: `/directoriesGeographyCountries/${updated.id}`,\r\n                method: 'PUT',\r\n                body: updated,\r\n            }),\r\n            //pessimistic update - after fulfilled query\r\n            onQueryStarted(_, { dispatch, queryFulfilled }) {\r\n                queryFulfilled\r\n                    .then(({ data }) => {\r\n                        dispatch(\r\n                            geographyCountriesApi.util.updateQueryData('fetchCountries', '', draft => {\r\n                                let founded = draft.find(founded => founded.id === data.id)\r\n                                !!founded && Object.assign(founded, data)\r\n                            })\r\n                        )\r\n                    })\r\n            },\r\n        }),\r\n        deleteCountry: build.mutation<{}, number>({\r\n            query: (id) => ({\r\n                url: `/directoriesGeographyCountries/${id}`,\r\n                method: 'DELETE',\r\n            }),\r\n            //refetch\r\n            invalidatesTags: [{ type: 'GeographyCountries', id: 'LIST' }],\r\n        }),\r\n    }),\r\n})\r\n\r\nexport const {\r\n    useCreateCountryMutation,\r\n    useDeleteCountryMutation,\r\n    useFetchCountriesQuery,\r\n    useUpdateCountryMutation,\r\n} = geographyCountriesApi","import { commonApi } from \"@store/common.api\"\r\nimport { GeographyRegion } from \"../models\"\r\n\r\nexport const geographyRegionsApi = commonApi.injectEndpoints({\r\n    endpoints: build => ({\r\n        fetchRegions: build.query<GeographyRegion[], string>({\r\n            query: () => ({\r\n                url: '/directoriesGeographyRegions',\r\n            }),\r\n            providesTags: [{ type: 'GeographyRegions', id: 'LIST' }],\r\n        }),\r\n        createRegion: build.mutation<GeographyRegion, Omit<GeographyRegion, 'id'>>({\r\n            query: (created) => ({\r\n                url: '/directoriesGeographyRegions',\r\n                method: 'POST',\r\n                body: created,\r\n            }),\r\n            //pessimistic update - after fulfilled query\r\n            onQueryStarted(_, { dispatch, queryFulfilled }) {\r\n                queryFulfilled\r\n                    .then(({ data }) => {\r\n                        dispatch(\r\n                            geographyRegionsApi.util.updateQueryData('fetchRegions', '', draft => {\r\n                                draft.push(data)\r\n                            })\r\n                        )\r\n                    })\r\n            },\r\n        }),\r\n        updateRegion: build.mutation<GeographyRegion, GeographyRegion>({\r\n            query: (updated) => ({\r\n                url: `/directoriesGeographyRegions/${updated.id}`,\r\n                method: 'PUT',\r\n                body: updated,\r\n            }),\r\n            //pessimistic update - after fulfilled query\r\n            onQueryStarted(_, { dispatch, queryFulfilled }) {\r\n                queryFulfilled\r\n                    .then(({ data }) => {\r\n                        dispatch(\r\n                            geographyRegionsApi.util.updateQueryData('fetchRegions', '', draft => {\r\n                                let founded = draft.find(founded => founded.id === data.id)\r\n                                !!founded && Object.assign(founded, data)\r\n                            })\r\n                        )\r\n                    })\r\n            },\r\n        }),\r\n        deleteRegion: build.mutation<{}, number>({\r\n            query: (id) => ({\r\n                url: `/directoriesGeographyRegions/${id}`,\r\n                method: 'DELETE',\r\n            }),\r\n            //refetch\r\n            invalidatesTags: [{ type: 'GeographyRegions', id: 'LIST' }],\r\n        }),\r\n    }),\r\n})\r\n\r\nexport const {\r\n    useCreateRegionMutation,\r\n    useDeleteRegionMutation,\r\n    useUpdateRegionMutation,\r\n    useFetchRegionsQuery,\r\n} = geographyRegionsApi","import moment from \"moment\"\r\nimport { CustomColumnType } from \"@components/smartTable/lib/types\"\r\nimport { GeographyRegion } from \"../models\"\r\nimport { BaseCatalogs, Catalog } from \"@models/base\"\r\n\r\nconst getCatalogValue = (value: any, catalogs: Catalog[] | undefined) =>\r\n    catalogs?.find((catalog) => catalog.id === value)?.name\r\n\r\nconst getRegionsColumns = (catalogs?: BaseCatalogs): CustomColumnType<GeographyRegion>[] => ([\r\n    {\r\n        title: 'Страна',\r\n        dataIndex: 'countryId',\r\n        key: 'countryId',\r\n        filters: catalogs?.countries?.map((catalog) => ({ text: catalog.name, value: catalog.id })),\r\n        onFilter: (value, record) => record.countryId === value,\r\n        render: (value) => getCatalogValue(value, catalogs?.countries),\r\n        sorter: (a, b) =>\r\n            getCatalogValue(a.countryId, catalogs?.countries)?.localeCompare(\r\n                getCatalogValue(b.countryId, catalogs?.countries) ?? '') ?? 0,\r\n        editable: true,\r\n        editCatalog: catalogs?.countries,\r\n        editType: 'select',\r\n        width: 200,\r\n    },\r\n    {\r\n        title: 'Название',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        customFilter: 'search',\r\n        sorter: (a, b) => a.name.localeCompare(b.name),\r\n        editable: true,\r\n        editType: 'text',\r\n        width: 200,\r\n    },\r\n    {\r\n        title: 'Код',\r\n        dataIndex: 'code',\r\n        key: 'code',\r\n        customFilter: 'search',\r\n        sorter: (a, b) => a.code.localeCompare(b.code),\r\n        editable: true,\r\n        editType: 'text',\r\n        width: 120,\r\n    },\r\n    {\r\n        title: 'Префикс',\r\n        dataIndex: 'prefix',\r\n        key: 'prefix',\r\n        customFilter: 'search',\r\n        sorter: (a, b) => a.prefix.localeCompare(b.prefix),\r\n        editable: true,\r\n        editType: 'text',\r\n        width: 120,\r\n    },\r\n    {\r\n        title: 'Полное название',\r\n        dataIndex: 'fullName',\r\n        key: 'fullName',\r\n        customFilter: 'search',\r\n        sorter: (a, b) => a.fullName.localeCompare(b.fullName),\r\n        editable: true,\r\n        editType: 'text',\r\n        width: 200,\r\n    },\r\n    {\r\n        title: 'Кем создано',\r\n        dataIndex: ['created_by', 'name'],\r\n        key: 'created_by',\r\n        customFilter: 'search',\r\n        align: 'center',\r\n        sorter: (a, b) => a.created_by.name.localeCompare(b.created_by.name),\r\n        width: 150,\r\n        responsive: ['xl'],\r\n        editable: false,\r\n    },\r\n    {\r\n        title: 'Когда создано',\r\n        dataIndex: 'created_date',\r\n        key: 'created_date',\r\n        customFilter: 'date-picker',\r\n        render: (value) => (!!value ? moment(value).format('L') : '-'),\r\n        sorter: (a, b) => moment(a.created_date).diff(b.created_date),\r\n        align: 'center',\r\n        width: 150,\r\n        responsive: ['xl'],\r\n        editable: false,\r\n    },\r\n    {\r\n        title: 'Кем изменено',\r\n        dataIndex: ['updated_by', 'name'],\r\n        key: 'updated_by',\r\n        customFilter: 'search',\r\n        align: 'center',\r\n        sorter: (a, b) => a.updated_by?.name.localeCompare(b.updated_by?.name ?? '') ?? 0,\r\n        render: (value) => value ?? '-',\r\n        width: 150,\r\n        responsive: ['xxl'],\r\n        editable: false,\r\n    },\r\n    {\r\n        title: 'Когда изменено',\r\n        dataIndex: 'updated_date',\r\n        key: 'updated_date',\r\n        customFilter: 'date-picker',\r\n        render: (value) => (!!value ? moment(value).format('L LT') : '-'),\r\n        sorter: (a, b) => moment(a.updated_date).diff(b.updated_date),\r\n        align: 'center',\r\n        width: 150,\r\n        responsive: ['xxl'],\r\n        editable: false,\r\n    },\r\n])\r\n\r\nexport default getRegionsColumns","import React from 'react'\r\nimport { FormItemProps, Input } from 'antd'\r\nimport { BaseCatalogs } from '@models/base'\r\nimport { CatalogSelect } from '@components/controllers'\r\n\r\nconst getCreatedFields = (name: number, catalogs?: BaseCatalogs): (FormItemProps & { key: React.Key })[] => [\r\n    {\r\n        key: \"countryId\",\r\n        name: [name, 'countryId'],\r\n        style: { width: 150 },\r\n        rules: [{ required: true, message: 'Выберите страну' }],\r\n        children: <CatalogSelect catalog={catalogs?.countries} placeholder='Страна' />\r\n    },\r\n    {\r\n        key: \"name\",\r\n        name: [name, 'name'],\r\n        style: { width: 200 },\r\n        rules: [{ required: true, message: 'Введите название' }],\r\n        children: <Input placeholder=\"Название\" />\r\n    },\r\n    {\r\n        key: \"code\",\r\n        name: [name, 'code'],\r\n        style: { width: 80 },\r\n        rules: [{ required: true, message: 'Введите код' }],\r\n        children: <Input placeholder=\"Код\" />\r\n    },\r\n    {\r\n        key: \"prefix\",\r\n        name: [name, 'prefix'],\r\n        style: { width: 80 },\r\n        rules: [{ required: true, message: 'Введите префикс' }],\r\n        children: <Input placeholder=\"Префикс\" />\r\n    },\r\n    {\r\n        key: \"fullName\",\r\n        name: [name, 'fullName'],\r\n        style: { flexGrow: 1 },\r\n        rules: [{ required: true, message: 'Введите полное название' }],\r\n        children: <Input placeholder=\"Полное название\" />\r\n    },\r\n]\r\n\r\nexport default getCreatedFields","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useCallback } from \"react\"\r\nimport moment from \"moment\"\r\nimport { FormInstance, message } from \"antd\"\r\nimport { MutationDefinition } from \"@reduxjs/toolkit/dist/query\"\r\nimport { MutationTrigger } from \"@reduxjs/toolkit/dist/query/react/buildHooks\"\r\nimport { User } from \"@models/user\"\r\nimport { GeographyRegion, CreateRegionValues } from \"../models\"\r\nimport { BaseDirectoryFields } from \"@models/base\"\r\n\r\ninterface Props {\r\n    user: User\r\n    createRegion: MutationTrigger<MutationDefinition<Omit<GeographyRegion, \"id\">, any, any, GeographyRegion, string>>\r\n    deleteRegion: MutationTrigger<MutationDefinition<number, any, any, {}, string>>\r\n    updateRegion: MutationTrigger<MutationDefinition<GeographyRegion, any, any, GeographyRegion, string>>\r\n    editForm: FormInstance<any>\r\n    hideCreateModal: () => void\r\n    cancelEdit: () => void\r\n    selectedRowKeys: React.Key[]\r\n    setSelectedRowKeys: React.Dispatch<React.SetStateAction<React.Key[]>>\r\n}\r\n\r\nconst useRegionActions = ({\r\n    user,\r\n    createRegion,\r\n    deleteRegion,\r\n    updateRegion, \r\n    editForm, \r\n    hideCreateModal, \r\n    cancelEdit, \r\n    selectedRowKeys, \r\n    setSelectedRowKeys\r\n}: Props) => {\r\n    //Creating\r\n    const onCreate = useCallback((data: Omit<GeographyRegion, 'id'>) => \r\n        createRegion(data), [])\r\n    const onGroupCreate = useCallback(async (values: CreateRegionValues) => {\r\n        if (!!values.regions?.length) {\r\n            const initialData: Omit<BaseDirectoryFields, 'id' | 'name'> = {\r\n                type: \"geographyRegions\",\r\n                deleted: false,\r\n                created_by: user,\r\n                created_date: moment().toISOString(),\r\n                updated_by: null,\r\n                updated_date: null\r\n            }\r\n            return Promise.all(values.regions.map((region) => onCreate({ ...initialData, ...region }).unwrap()))\r\n                .then(() => {\r\n                    message.success('Данные успешно сохранены')\r\n                    hideCreateModal()\r\n                })\r\n        }\r\n    }, [user])\r\n\r\n    //Updating\r\n    const onUpdate = useCallback(async (record: GeographyRegion) => {\r\n        try {\r\n            await editForm.validateFields()\r\n            const data: GeographyRegion = { ...record, ...editForm.getFieldsValue() }\r\n            data.updated_by = user\r\n            data.updated_date = moment().toISOString()\r\n            await updateRegion(data).unwrap()\r\n            message.success('Изменение успешно')\r\n            cancelEdit()\r\n        } catch {}\r\n    }, [user])\r\n\r\n    //Deleting\r\n    const onDelete = useCallback((id: number) => deleteRegion(id), []) \r\n    const onGroupDelete = useCallback(async () => {\r\n        Promise.all(selectedRowKeys.map((id) => onDelete(Number(id)).unwrap()))\r\n            .then(() => {\r\n                message.success(`Удаление успешно`)\r\n                setSelectedRowKeys([])\r\n            })\r\n    }, [selectedRowKeys])\r\n\r\n    return {\r\n        onGroupCreate,\r\n        onUpdate,\r\n        onGroupDelete\r\n    }\r\n}\r\n\r\nexport default useRegionActions","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useCallback, useMemo, } from 'react'\r\nimport { Alert, Form, Modal } from 'antd'\r\nimport {\r\n    useCreateRegionMutation,\r\n    useDeleteRegionMutation,\r\n    useFetchRegionsQuery,\r\n    useUpdateRegionMutation\r\n} from './api/geographyRegions.api'\r\nimport { useFetchCountriesQuery } from '../countries/api/geographyCountries.api'\r\n//lib & ui\r\nimport { CreateRegionValues, GeographyRegion } from './models'\r\nimport getRegionsColumns from './lib/getRegionsColumns'\r\nimport getCreatedFields from './lib/getCreatedFields'\r\nimport useRegionActions from './lib/useRegionActions'\r\n//components\r\nimport { PageWrapper } from '@components/templates/PageWrapper'\r\nimport PageToolbar from '@components/templates/PageToolbar'\r\nimport SmartTable from '@components/smartTable'\r\nimport DynamicForm from '@components/templates/DynamicForm'\r\nimport { EditableCell } from '@components/smartTable/ui'\r\nimport { getEditColumns } from '@components/smartTable/lib/getEditColumns'\r\n//hooks\r\nimport useWindowSize from '@utils/hooks/useWindowSize'\r\nimport { useUser } from '@utils/hooks/useUser'\r\nimport { useTable } from '@utils/hooks/useTable'\r\nimport { useModal } from '@utils/hooks/useModal'\r\nimport { useEditRow } from '@utils/hooks/useEditRow'\r\nimport { BaseCatalogs } from '@models/base'\r\n\r\nconst Page: React.FC = () => {\r\n    const user = useUser()\r\n    const { width, height } = useWindowSize()\r\n\r\n    //Queries & mutations\r\n    const { data, isLoading, isFetching, error } = useFetchRegionsQuery('')\r\n    const [updateRegion, { isLoading: updateLoading, error: updateError }] = useUpdateRegionMutation()\r\n    const [createRegion, { isLoading: createLoading, error: createError }] = useCreateRegionMutation()\r\n    const [deleteRegion, { isLoading: deleteLoading, error: deleteError }] = useDeleteRegionMutation()\r\n    const dataError = error || updateError || createError || deleteError\r\n    //Catalogs\r\n    const { data: countries } = useFetchCountriesQuery('')\r\n    const catalogs: BaseCatalogs = useMemo(() => ({ countries }), [countries])\r\n\r\n    //Creating modal\r\n    const [createModalVisible, showCreateModal, hideCreateModal] = useModal()\r\n    const createFields = useCallback(getCreatedFields, [])\r\n\r\n    //Table\r\n    const {\r\n        rowSelection, \r\n        selectedRowKeys, \r\n        setSelectedRowKeys,\r\n    } = useTable<GeographyRegion>()\r\n\r\n    const { edit, editForm, editingKey, isEditing, cancelEdit } = useEditRow<GeographyRegion>()\r\n\r\n    const scroll = useMemo(() => ({ y: height - 260 }), [height])\r\n    const pagination = useMemo(() => ({ onChange: cancelEdit, showSizeChanger: true }), [])\r\n    const components = useMemo(() => ({ body: { cell: EditableCell, } }), [])\r\n\r\n    const { onUpdate, onGroupCreate, onGroupDelete } = useRegionActions({\r\n        user, editForm, cancelEdit, hideCreateModal, selectedRowKeys, setSelectedRowKeys,\r\n        createRegion, deleteRegion, updateRegion\r\n    })\r\n\r\n    //Columns & data\r\n    const columns = useMemo(() =>\r\n        getEditColumns({\r\n            columns: getRegionsColumns(catalogs),\r\n            cancelEdit,\r\n            edit,\r\n            editingKey,\r\n            isEditing,\r\n            loading: updateLoading,\r\n            onSave: onUpdate\r\n        }), [editingKey, catalogs])\r\n    const dataSource = useMemo(() => data ?? [], [data])\r\n\r\n    return (\r\n        <PageWrapper>\r\n            <section className='main-section'>\r\n                <PageToolbar\r\n                    deleteDisable={!selectedRowKeys.length}\r\n                    deleteLoading={deleteLoading}\r\n                    onOpenCreate={showCreateModal}\r\n                    onDelete={onGroupDelete}\r\n                />\r\n                <Form form={editForm} component={false}>\r\n                    <SmartTable<GeographyRegion>\r\n                        components={components}\r\n                        columns={columns}\r\n                        dataSource={dataSource}\r\n                        rowSelection={rowSelection}\r\n                        loading={isFetching || isLoading}\r\n                        scroll={scroll}\r\n                        pagination={pagination}\r\n                    />\r\n                </Form>\r\n                {(!!dataError) && <Alert message={JSON.stringify(dataError)} type=\"error\"/>}\r\n            </section>\r\n            <Modal\r\n                open={createModalVisible}\r\n                width={800}\r\n                title=\"Создать\"\r\n                centered\r\n                footer={null}\r\n                onCancel={hideCreateModal}\r\n            >\r\n                <DynamicForm<CreateRegionValues>\r\n                    name='regions'\r\n                    getfields={createFields}\r\n                    loading={createLoading}\r\n                    error={createError}\r\n                    onFinish={onGroupCreate}\r\n                    catalogs={catalogs}\r\n                    width={width}\r\n                />\r\n            </Modal>\r\n        </PageWrapper>\r\n    )\r\n}\r\n\r\nexport default Page"],"names":["geographyCountriesApi","commonApi","endpoints","build","fetchCountries","query","url","providesTags","type","id","createCountry","mutation","created","method","body","onQueryStarted","_","dispatch","queryFulfilled","then","data","util","updateQueryData","draft","push","updateCountry","updated","founded","find","Object","assign","deleteCountry","invalidatesTags","useCreateCountryMutation","useDeleteCountryMutation","useFetchCountriesQuery","useUpdateCountryMutation","geographyRegionsApi","fetchRegions","createRegion","updateRegion","deleteRegion","useCreateRegionMutation","useDeleteRegionMutation","useUpdateRegionMutation","useFetchRegionsQuery","getCatalogValue","value","catalogs","catalog","name","title","dataIndex","key","filters","countries","map","text","onFilter","record","countryId","render","sorter","a","b","localeCompare","editable","editCatalog","editType","width","customFilter","code","prefix","fullName","align","created_by","responsive","moment","format","created_date","diff","updated_by","updated_date","style","rules","required","message","children","placeholder","flexGrow","user","editForm","hideCreateModal","cancelEdit","selectedRowKeys","setSelectedRowKeys","onCreate","useCallback","onGroupCreate","values","regions","length","initialData","deleted","toISOString","Promise","all","region","unwrap","onUpdate","validateFields","getFieldsValue","onDelete","onGroupDelete","Number","useUser","useWindowSize","height","isLoading","isFetching","error","updateLoading","updateError","createLoading","createError","deleteLoading","deleteError","dataError","useMemo","useModal","createModalVisible","showCreateModal","createFields","getCreatedFields","useTable","rowSelection","useEditRow","edit","editingKey","isEditing","scroll","y","pagination","onChange","showSizeChanger","components","cell","EditableCell","useRegionActions","columns","getEditColumns","getRegionsColumns","loading","onSave","dataSource","PageWrapper","className","PageToolbar","deleteDisable","onOpenCreate","form","component","JSON","stringify","open","centered","footer","onCancel","DynamicForm","getfields","onFinish"],"sourceRoot":""}