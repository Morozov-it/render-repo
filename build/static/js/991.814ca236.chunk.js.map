{"version":3,"file":"static/js/991.814ca236.chunk.js","mappings":"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","sources":["pages/directories/geography/countries/api/geographyCountries.api.ts","pages/directories/geography/localities/api/geographyLocalities.api.ts","pages/directories/geography/localities/lib/getLocalitiesColumns.tsx","pages/directories/geography/localities/lib/getCreatedFields.tsx","pages/directories/geography/localities/lib/useLocalityActions.ts","pages/directories/geography/localities/index.tsx","pages/directories/geography/regions/api/geographyRegions.api.ts"],"sourcesContent":["import { commonApi } from \"@store/common.api\"\r\nimport { GeographyCountry } from \"../models\"\r\n\r\nexport const geographyCountriesApi = commonApi.injectEndpoints({\r\n    endpoints: build => ({\r\n        fetchCountries: build.query<GeographyCountry[], string>({\r\n            query: () => ({\r\n                url: '/directoriesGeographyCountries',\r\n            }),\r\n            providesTags: [{ type: 'GeographyCountries', id: 'LIST' }],\r\n        }),\r\n        createCountry: build.mutation<GeographyCountry, Omit<GeographyCountry, 'id'>>({\r\n            query: (created) => ({\r\n                url: '/directoriesGeographyCountries',\r\n                method: 'POST',\r\n                body: created,\r\n            }),\r\n            //pessimistic update - after fulfilled query\r\n            onQueryStarted(_, { dispatch, queryFulfilled }) {\r\n                queryFulfilled\r\n                    .then(({ data }) => {\r\n                        dispatch(\r\n                            geographyCountriesApi.util.updateQueryData('fetchCountries', '', draft => {\r\n                                draft.push(data)\r\n                            })\r\n                        )\r\n                    })\r\n            },\r\n        }),\r\n        updateCountry: build.mutation<GeographyCountry, GeographyCountry>({\r\n            query: (updated) => ({\r\n                url: `/directoriesGeographyCountries/${updated.id}`,\r\n                method: 'PUT',\r\n                body: updated,\r\n            }),\r\n            //pessimistic update - after fulfilled query\r\n            onQueryStarted(_, { dispatch, queryFulfilled }) {\r\n                queryFulfilled\r\n                    .then(({ data }) => {\r\n                        dispatch(\r\n                            geographyCountriesApi.util.updateQueryData('fetchCountries', '', draft => {\r\n                                let founded = draft.find(founded => founded.id === data.id)\r\n                                !!founded && Object.assign(founded, data)\r\n                            })\r\n                        )\r\n                    })\r\n            },\r\n        }),\r\n        deleteCountry: build.mutation<{}, number>({\r\n            query: (id) => ({\r\n                url: `/directoriesGeographyCountries/${id}`,\r\n                method: 'DELETE',\r\n            }),\r\n            //refetch\r\n            invalidatesTags: [{ type: 'GeographyCountries', id: 'LIST' }],\r\n        }),\r\n    }),\r\n})\r\n\r\nexport const {\r\n    useCreateCountryMutation,\r\n    useDeleteCountryMutation,\r\n    useFetchCountriesQuery,\r\n    useUpdateCountryMutation,\r\n} = geographyCountriesApi","import { commonApi } from \"@store/common.api\"\r\nimport { GeographyLocality } from \"../models\"\r\n\r\nexport const geographyLocalitiesApi = commonApi.injectEndpoints({\r\n    endpoints: build => ({\r\n        fetchLocalities: build.query<GeographyLocality[], string>({\r\n            query: () => ({\r\n                url: '/directoriesGeographyLocalities',\r\n            }),\r\n            providesTags: [{ type: 'GeographyLocalities', id: 'LIST' }],\r\n        }),\r\n        createLocality: build.mutation<GeographyLocality, Omit<GeographyLocality, 'id'>>({\r\n            query: (created) => ({\r\n                url: '/directoriesGeographyLocalities',\r\n                method: 'POST',\r\n                body: created,\r\n            }),\r\n            //pessimistic update - after fulfilled query\r\n            onQueryStarted(_, { dispatch, queryFulfilled }) {\r\n                queryFulfilled\r\n                    .then(({ data }) => {\r\n                        dispatch(\r\n                            geographyLocalitiesApi.util.updateQueryData('fetchLocalities', '', draft => {\r\n                                draft.push(data)\r\n                            })\r\n                        )\r\n                    })\r\n            },\r\n        }),\r\n        updateLocality: build.mutation<GeographyLocality, GeographyLocality>({\r\n            query: (updated) => ({\r\n                url: `/directoriesGeographyLocalities/${updated.id}`,\r\n                method: 'PUT',\r\n                body: updated,\r\n            }),\r\n            //pessimistic update - after fulfilled query\r\n            onQueryStarted(_, { dispatch, queryFulfilled }) {\r\n                queryFulfilled\r\n                    .then(({ data }) => {\r\n                        dispatch(\r\n                            geographyLocalitiesApi.util.updateQueryData('fetchLocalities', '', draft => {\r\n                                let founded = draft.find(country => country.id === data.id)\r\n                                !!founded && Object.assign(founded, data)\r\n                            })\r\n                        )\r\n                    })\r\n            },\r\n        }),\r\n        deleteLocality: build.mutation<{}, number>({\r\n            query: (id) => ({\r\n                url: `/directoriesGeographyLocalities/${id}`,\r\n                method: 'DELETE',\r\n            }),\r\n            //refetch\r\n            invalidatesTags: [{ type: 'GeographyLocalities', id: 'LIST' }],\r\n        }),\r\n    }),\r\n})\r\n\r\nexport const {\r\n    useCreateLocalityMutation,\r\n    useDeleteLocalityMutation,\r\n    useFetchLocalitiesQuery,\r\n    useUpdateLocalityMutation,\r\n} = geographyLocalitiesApi","import moment from \"moment\"\r\nimport { CustomColumnType } from \"@components/smartTable/lib/types\"\r\nimport { GeographyLocality } from \"../models\"\r\nimport { BaseCatalogs, Catalog } from \"@models/base\"\r\n\r\nconst getCatalogValue = (value: any, catalogs: Catalog[] | undefined) =>\r\n    catalogs?.find((catalog) => catalog.id === value)?.name\r\n\r\nconst getCatalogFilter = (catalogs: Catalog[] | undefined) => \r\n    catalogs?.map((catalog) => ({ text: catalog.name, value: catalog.id }))\r\n\r\nconst getLocalitiesColumns = (catalogs?: BaseCatalogs): CustomColumnType<GeographyLocality>[] => ([\r\n    {\r\n        title: 'Страна',\r\n        dataIndex: 'countryId',\r\n        key: 'countryId',\r\n        filters: getCatalogFilter(catalogs?.countries),\r\n        onFilter: (value, record) => record.countryId === value,\r\n        render: (value) => getCatalogValue(value, catalogs?.countries),\r\n        sorter: (a, b) =>\r\n            getCatalogValue(a.countryId, catalogs?.countries)?.localeCompare(\r\n                getCatalogValue(b.countryId, catalogs?.countries) ?? '') ?? 0,\r\n        editable: true,\r\n        editCatalog: catalogs?.countries,\r\n        editType: 'select',\r\n        width: 200,\r\n    },\r\n    {\r\n        title: 'Регион',\r\n        dataIndex: 'regionId',\r\n        key: 'regionId',\r\n        filters: getCatalogFilter(catalogs?.regions),\r\n        onFilter: (value, record) => record.regionId === value,\r\n        render: (value) => getCatalogValue(value, catalogs?.regions),\r\n        sorter: (a, b) =>\r\n            getCatalogValue(a.regionId, catalogs?.regions)?.localeCompare(\r\n                getCatalogValue(b.regionId, catalogs?.regions) ?? '') ?? 0,\r\n        editable: true,\r\n        editCatalog: catalogs?.regions,\r\n        editType: 'select',\r\n        width: 200,\r\n    },\r\n    {\r\n        title: 'Район',\r\n        dataIndex: 'district',\r\n        key: 'district',\r\n        customFilter: 'search',\r\n        sorter: (a, b) => a.district.localeCompare(b.district),\r\n        editable: true,\r\n        width: 200,\r\n    },\r\n    {\r\n        title: 'Префикс района',\r\n        dataIndex: 'districtPrefix',\r\n        key: 'districtPrefix',\r\n        customFilter: 'search',\r\n        align: 'center',\r\n        sorter: (a, b) => a.districtPrefix.localeCompare(b.districtPrefix),\r\n        editable: true,\r\n        width: 120,\r\n    },\r\n    {\r\n        title: 'Населенный пункт',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        customFilter: 'search',\r\n        sorter: (a, b) => a.name.localeCompare(b.name),\r\n        editable: true,\r\n        width: 200,\r\n    },\r\n    {\r\n        title: 'Префикс нас.пункта',\r\n        dataIndex: 'namePrefix',\r\n        key: 'namePrefix',\r\n        customFilter: 'search',\r\n        align: 'center',\r\n        sorter: (a, b) => a.namePrefix.localeCompare(b.namePrefix),\r\n        editable: true,\r\n        width: 120,\r\n    },\r\n    {\r\n        title: 'Поселение',\r\n        dataIndex: 'area',\r\n        key: 'area',\r\n        customFilter: 'search',\r\n        sorter: (a, b) => a.area?.localeCompare(b.area ?? '') ?? 0,\r\n        editable: true,\r\n        width: 200,\r\n    },\r\n    {\r\n        title: 'Префикс поселения',\r\n        dataIndex: 'areaPrefix',\r\n        key: 'areaPrefix',\r\n        customFilter: 'search',\r\n        align: 'center',\r\n        sorter: (a, b) => a.areaPrefix?.localeCompare(b.areaPrefix ?? '') ?? 0,\r\n        editable: true,\r\n        width: 120,\r\n    },\r\n    {\r\n        title: 'Кем создано',\r\n        dataIndex: ['created_by', 'name'],\r\n        key: 'created_by',\r\n        customFilter: 'search',\r\n        align: 'center',\r\n        sorter: (a, b) => a.created_by.name.localeCompare(b.created_by.name),\r\n        width: 150,\r\n        editable: false,\r\n        responsive: ['xxl'],\r\n    },\r\n    {\r\n        title: 'Когда создано',\r\n        dataIndex: 'created_date',\r\n        key: 'created_date',\r\n        customFilter: 'date-picker',\r\n        render: (value) => (!!value ? moment(value).format('L') : '-'),\r\n        sorter: (a, b) => moment(a.created_date).diff(b.created_date),\r\n        align: 'center',\r\n        width: 150,\r\n        editable: false,\r\n        responsive: ['xxl'],\r\n    },\r\n    {\r\n        title: 'Кем изменено',\r\n        dataIndex: ['updated_by', 'name'],\r\n        key: 'updated_by',\r\n        customFilter: 'search',\r\n        align: 'center',\r\n        sorter: (a, b) => a.updated_by?.name.localeCompare(b.updated_by?.name ?? '') ?? 0,\r\n        render: (value) => value ?? '-',\r\n        width: 150,\r\n        editable: false,\r\n        responsive: ['xxl'],\r\n    },\r\n    {\r\n        title: 'Когда изменено',\r\n        dataIndex: 'updated_date',\r\n        key: 'updated_date',\r\n        customFilter: 'date-picker',\r\n        render: (value) => (!!value ? moment(value).format('L LT') : '-'),\r\n        sorter: (a, b) => moment(a.updated_date).diff(b.updated_date),\r\n        align: 'center',\r\n        width: 150,\r\n        editable: false,\r\n        responsive: ['xxl'],\r\n    },\r\n])\r\n\r\nexport default getLocalitiesColumns","import React from 'react'\r\nimport { FormItemProps, Input } from 'antd'\r\nimport { BaseCatalogs } from '@models/base'\r\nimport { CatalogSelect } from '@components/controllers'\r\n\r\nconst getCreatedFields = (name: number, catalogs?: BaseCatalogs): (FormItemProps & { key: React.Key })[] => [\r\n    {\r\n        key: \"countryId\",\r\n        name: [name, 'countryId'],\r\n        style: { width: 150 },\r\n        rules: [{ required: true, message: 'Выберите страну' }],\r\n        children: <CatalogSelect catalog={catalogs?.countries} placeholder='Страна' />\r\n    },\r\n    {\r\n        key: \"regionId\",\r\n        name: [name, 'regionId'],\r\n        style: { width: 150 },\r\n        rules: [{ required: true, message: 'Выберите регион' }],\r\n        children: <CatalogSelect catalog={catalogs?.regions} placeholder='Регион' />\r\n    },\r\n    {\r\n        key: \"district\",\r\n        name: [name, 'district'],\r\n        style: { width: 150 },\r\n        rules: [{ required: true, message: 'Введите район' }],\r\n        children: <Input placeholder=\"Район\" />\r\n    },\r\n    {\r\n        key: \"districtPrefix\",\r\n        name: [name, 'districtPrefix'],\r\n        style: { width: 80 },\r\n        rules: [{ required: true, message: 'Введите префикс' }],\r\n        children: <Input placeholder=\"Префикс р-на\" />\r\n    },\r\n    {\r\n        key: \"name\",\r\n        name: [name, 'name'],\r\n        style: { width: 200, flexGrow: 1 },\r\n        rules: [{ required: true, message: 'Введите населенный пункт' }],\r\n        children: <Input placeholder=\"Населенный пункт\" />\r\n    },\r\n    {\r\n        key: \"namePrefix\",\r\n        name: [name, 'namePrefix'],\r\n        style: { width: 80 },\r\n        rules: [{ required: true, message: 'Введите префикс' }],\r\n        children: <Input placeholder=\"Префикс пункта\" />\r\n    },\r\n    {\r\n        key: \"area\",\r\n        name: [name, 'area'],\r\n        style: { width: 150 },\r\n        children: <Input placeholder=\"Поселение\" />\r\n    },\r\n    {\r\n        key: \"areaPrefix\",\r\n        name: [name, 'areaPrefix'],\r\n        style: { width: 80 },\r\n        children: <Input placeholder=\"Префикс поселения\" />\r\n    },\r\n]\r\n\r\nexport default getCreatedFields","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useCallback } from \"react\"\r\nimport moment from \"moment\"\r\nimport { FormInstance, message } from \"antd\"\r\nimport { MutationDefinition } from \"@reduxjs/toolkit/dist/query\"\r\nimport { MutationTrigger } from \"@reduxjs/toolkit/dist/query/react/buildHooks\"\r\nimport { User } from \"@models/user\"\r\nimport { GeographyLocality, CreateLocalityValues } from \"../models\"\r\nimport { BaseDirectoryFields } from \"@models/base\"\r\n\r\ninterface Props {\r\n    user: User\r\n    createLocality: MutationTrigger<MutationDefinition<Omit<GeographyLocality, \"id\">, any, any, GeographyLocality, string>>\r\n    deleteLocality: MutationTrigger<MutationDefinition<number, any, any, {}, string>>\r\n    updateLocality: MutationTrigger<MutationDefinition<GeographyLocality, any, any, GeographyLocality, string>>\r\n    editForm: FormInstance<any>\r\n    hideCreateModal: () => void\r\n    cancelEdit: () => void\r\n    selectedRowKeys: React.Key[]\r\n    setSelectedRowKeys: React.Dispatch<React.SetStateAction<React.Key[]>>\r\n}\r\n\r\nconst useLocalityActions = ({\r\n    user,\r\n    createLocality,\r\n    deleteLocality,\r\n    updateLocality, \r\n    editForm, \r\n    hideCreateModal, \r\n    cancelEdit, \r\n    selectedRowKeys, \r\n    setSelectedRowKeys\r\n}: Props) => {\r\n    //Creating\r\n    const onCreate = useCallback((data: Omit<GeographyLocality, 'id'>) => \r\n        createLocality(data), [])\r\n    const onGroupCreate = useCallback(async (values: CreateLocalityValues) => {\r\n        if (!!values.localities?.length) {\r\n            const initialData: Omit<BaseDirectoryFields, 'id' | 'name'> = {\r\n                type: \"geographyLocalities\",\r\n                deleted: false,\r\n                created_by: user,\r\n                created_date: moment().toISOString(),\r\n                updated_by: null,\r\n                updated_date: null\r\n            }\r\n            return Promise.all(values.localities.map((locality) => onCreate({ ...initialData, ...locality }).unwrap()))\r\n                .then(() => {\r\n                    message.success('Данные успешно сохранены')\r\n                    hideCreateModal()\r\n                })\r\n        }\r\n    }, [user])\r\n\r\n    //Updating\r\n    const onUpdate = useCallback(async (record: GeographyLocality) => {\r\n        try {\r\n            await editForm.validateFields()\r\n            const data: GeographyLocality = { ...record, ...editForm.getFieldsValue() }\r\n            data.updated_by = user\r\n            data.updated_date = moment().toISOString()\r\n            await updateLocality(data).unwrap()\r\n            message.success('Изменение успешно')\r\n            cancelEdit()\r\n        } catch {}\r\n    }, [user])\r\n\r\n    //Deleting\r\n    const onDelete = useCallback((id: number) => deleteLocality(id), []) \r\n    const onGroupDelete = useCallback(async () => {\r\n        Promise.all(selectedRowKeys.map((id) => onDelete(Number(id)).unwrap()))\r\n            .then(() => {\r\n                message.success(`Удаление успешно`)\r\n                setSelectedRowKeys([])\r\n            })\r\n    }, [selectedRowKeys])\r\n\r\n    return {\r\n        onGroupCreate,\r\n        onUpdate,\r\n        onGroupDelete\r\n    }\r\n}\r\n\r\nexport default useLocalityActions","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useCallback, useMemo, } from 'react'\r\nimport { Alert, Form, Modal } from 'antd'\r\nimport {\r\n    useCreateLocalityMutation,\r\n    useDeleteLocalityMutation,\r\n    useFetchLocalitiesQuery,\r\n    useUpdateLocalityMutation\r\n} from './api/geographyLocalities.api'\r\nimport { useFetchCountriesQuery } from '../countries/api/geographyCountries.api'\r\nimport { useFetchRegionsQuery } from '../regions/api/geographyRegions.api'\r\n//lib & ui\r\nimport { CreateLocalityValues, GeographyLocality } from './models'\r\nimport getLocalitiesColumns from './lib/getLocalitiesColumns'\r\nimport getCreatedFields from './lib/getCreatedFields'\r\nimport useLocalityActions from './lib/useLocalityActions'\r\n//components\r\nimport { PageWrapper } from '@components/templates/PageWrapper'\r\nimport PageToolbar from '@components/templates/PageToolbar'\r\nimport SmartTable from '@components/smartTable'\r\nimport DynamicForm from '@components/templates/DynamicForm'\r\nimport { EditableCell } from '@components/smartTable/ui'\r\nimport { getEditColumns } from '@components/smartTable/lib/getEditColumns'\r\n//hooks\r\nimport useWindowSize from '@utils/hooks/useWindowSize'\r\nimport { useUser } from '@utils/hooks/useUser'\r\nimport { useTable } from '@utils/hooks/useTable'\r\nimport { useModal } from '@utils/hooks/useModal'\r\nimport { useEditRow } from '@utils/hooks/useEditRow'\r\nimport { BaseCatalogs } from '@models/base'\r\n\r\nconst Page: React.FC = () => {\r\n    const user = useUser()\r\n    const { width, height } = useWindowSize()\r\n\r\n    //Queries & mutations\r\n    const { data, isLoading, isFetching, error } = useFetchLocalitiesQuery('')\r\n    const [updateLocality, { isLoading: updateLoading, error: updateError }] = useUpdateLocalityMutation()\r\n    const [createLocality, { isLoading: createLoading, error: createError }] = useCreateLocalityMutation()\r\n    const [deleteLocality, { isLoading: deleteLoading, error: deleteError }] = useDeleteLocalityMutation()\r\n    const dataError = error || updateError || createError || deleteError\r\n    //Catalogs\r\n    const { data: countries } = useFetchCountriesQuery('')\r\n    const { data: regions } = useFetchRegionsQuery('')\r\n    const catalogs: BaseCatalogs = useMemo(() => ({\r\n        countries,\r\n        regions: regions?.map((region) => ({ id: region.id, name: region.name + ' ' + region.prefix }))\r\n    }), [countries, regions])\r\n\r\n    //Creating modal\r\n    const [createModalVisible, showCreateModal, hideCreateModal] = useModal()\r\n    const createFields = useCallback(getCreatedFields, [])\r\n\r\n    //Table\r\n    const {\r\n        rowSelection, \r\n        selectedRowKeys, \r\n        setSelectedRowKeys,\r\n    } = useTable<GeographyLocality>()\r\n\r\n    const { edit, editForm, editingKey, isEditing, cancelEdit } = useEditRow<GeographyLocality>()\r\n\r\n    const scroll = useMemo(() => ({ y: height - 260 }), [height])\r\n    const pagination = useMemo(() => ({ onChange: cancelEdit, showSizeChanger: true }), [])\r\n    const components = useMemo(() => ({ body: { cell: EditableCell, } }), [])\r\n\r\n    const { onUpdate, onGroupCreate, onGroupDelete } = useLocalityActions({\r\n        user, editForm, cancelEdit, hideCreateModal, selectedRowKeys, setSelectedRowKeys,\r\n        createLocality, deleteLocality, updateLocality\r\n    })\r\n\r\n    //Columns & data\r\n    const columns = useMemo(() =>\r\n        getEditColumns({\r\n            columns: getLocalitiesColumns(catalogs),\r\n            cancelEdit,\r\n            edit,\r\n            editingKey,\r\n            isEditing,\r\n            loading: updateLoading,\r\n            onSave: onUpdate\r\n        }), [editingKey, catalogs])\r\n    const dataSource = useMemo(() => data ?? [], [data])\r\n\r\n    return (\r\n        <PageWrapper>\r\n            <section className='main-section'>\r\n                <PageToolbar\r\n                    deleteDisable={!selectedRowKeys.length}\r\n                    deleteLoading={deleteLoading}\r\n                    onOpenCreate={showCreateModal}\r\n                    onDelete={onGroupDelete}\r\n                />\r\n                <Form form={editForm} component={false}>\r\n                    <SmartTable<GeographyLocality>\r\n                        components={components}\r\n                        columns={columns}\r\n                        dataSource={dataSource}\r\n                        rowSelection={rowSelection}\r\n                        loading={isFetching || isLoading}\r\n                        scroll={scroll}\r\n                        pagination={pagination}\r\n                    />\r\n                </Form>\r\n                {(!!dataError) && <Alert message={JSON.stringify(dataError)} type=\"error\"/>}\r\n            </section>\r\n            <Modal\r\n                open={createModalVisible}\r\n                width={1200}\r\n                title=\"Создать\"\r\n                centered\r\n                footer={null}\r\n                onCancel={hideCreateModal}\r\n            >\r\n                <DynamicForm<CreateLocalityValues>\r\n                    name='localities'\r\n                    getfields={createFields}\r\n                    loading={createLoading}\r\n                    error={createError}\r\n                    onFinish={onGroupCreate}\r\n                    catalogs={catalogs}\r\n                    width={width}\r\n                />\r\n            </Modal>\r\n        </PageWrapper>\r\n    )\r\n}\r\n\r\nexport default Page","import { commonApi } from \"@store/common.api\"\r\nimport { GeographyRegion } from \"../models\"\r\n\r\nexport const geographyRegionsApi = commonApi.injectEndpoints({\r\n    endpoints: build => ({\r\n        fetchRegions: build.query<GeographyRegion[], string>({\r\n            query: () => ({\r\n                url: '/directoriesGeographyRegions',\r\n            }),\r\n            providesTags: [{ type: 'GeographyRegions', id: 'LIST' }],\r\n        }),\r\n        createRegion: build.mutation<GeographyRegion, Omit<GeographyRegion, 'id'>>({\r\n            query: (created) => ({\r\n                url: '/directoriesGeographyRegions',\r\n                method: 'POST',\r\n                body: created,\r\n            }),\r\n            //pessimistic update - after fulfilled query\r\n            onQueryStarted(_, { dispatch, queryFulfilled }) {\r\n                queryFulfilled\r\n                    .then(({ data }) => {\r\n                        dispatch(\r\n                            geographyRegionsApi.util.updateQueryData('fetchRegions', '', draft => {\r\n                                draft.push(data)\r\n                            })\r\n                        )\r\n                    })\r\n            },\r\n        }),\r\n        updateRegion: build.mutation<GeographyRegion, GeographyRegion>({\r\n            query: (updated) => ({\r\n                url: `/directoriesGeographyRegions/${updated.id}`,\r\n                method: 'PUT',\r\n                body: updated,\r\n            }),\r\n            //pessimistic update - after fulfilled query\r\n            onQueryStarted(_, { dispatch, queryFulfilled }) {\r\n                queryFulfilled\r\n                    .then(({ data }) => {\r\n                        dispatch(\r\n                            geographyRegionsApi.util.updateQueryData('fetchRegions', '', draft => {\r\n                                let founded = draft.find(founded => founded.id === data.id)\r\n                                !!founded && Object.assign(founded, data)\r\n                            })\r\n                        )\r\n                    })\r\n            },\r\n        }),\r\n        deleteRegion: build.mutation<{}, number>({\r\n            query: (id) => ({\r\n                url: `/directoriesGeographyRegions/${id}`,\r\n                method: 'DELETE',\r\n            }),\r\n            //refetch\r\n            invalidatesTags: [{ type: 'GeographyRegions', id: 'LIST' }],\r\n        }),\r\n    }),\r\n})\r\n\r\nexport const {\r\n    useCreateRegionMutation,\r\n    useDeleteRegionMutation,\r\n    useUpdateRegionMutation,\r\n    useFetchRegionsQuery,\r\n} = geographyRegionsApi"],"names":["geographyCountriesApi","commonApi","endpoints","build","fetchCountries","query","url","providesTags","type","id","createCountry","mutation","created","method","body","onQueryStarted","_","dispatch","queryFulfilled","then","data","util","updateQueryData","draft","push","updateCountry","updated","founded","find","Object","assign","deleteCountry","invalidatesTags","useCreateCountryMutation","useDeleteCountryMutation","useFetchCountriesQuery","useUpdateCountryMutation","geographyLocalitiesApi","fetchLocalities","createLocality","updateLocality","country","deleteLocality","useCreateLocalityMutation","useDeleteLocalityMutation","useFetchLocalitiesQuery","useUpdateLocalityMutation","getCatalogValue","value","catalogs","catalog","name","getCatalogFilter","map","text","title","dataIndex","key","filters","countries","onFilter","record","countryId","render","sorter","a","b","localeCompare","editable","editCatalog","editType","width","regions","regionId","customFilter","district","align","districtPrefix","namePrefix","area","areaPrefix","created_by","responsive","moment","format","created_date","diff","updated_by","updated_date","style","rules","required","message","children","placeholder","flexGrow","user","editForm","hideCreateModal","cancelEdit","selectedRowKeys","setSelectedRowKeys","onCreate","useCallback","onGroupCreate","values","localities","length","initialData","deleted","toISOString","Promise","all","locality","unwrap","onUpdate","validateFields","getFieldsValue","onDelete","onGroupDelete","Number","useUser","useWindowSize","height","isLoading","isFetching","error","updateLoading","updateError","createLoading","createError","deleteLoading","deleteError","dataError","useFetchRegionsQuery","useMemo","region","prefix","useModal","createModalVisible","showCreateModal","createFields","getCreatedFields","useTable","rowSelection","useEditRow","edit","editingKey","isEditing","scroll","y","pagination","onChange","showSizeChanger","components","cell","EditableCell","useLocalityActions","columns","getEditColumns","getLocalitiesColumns","loading","onSave","dataSource","PageWrapper","className","PageToolbar","deleteDisable","onOpenCreate","form","component","JSON","stringify","open","centered","footer","onCancel","DynamicForm","getfields","onFinish","geographyRegionsApi","fetchRegions","createRegion","updateRegion","deleteRegion","useCreateRegionMutation","useDeleteRegionMutation","useUpdateRegionMutation"],"sourceRoot":""}