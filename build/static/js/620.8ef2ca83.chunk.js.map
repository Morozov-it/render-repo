{"version":3,"file":"static/js/620.8ef2ca83.chunk.js","mappings":"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","sources":["pages/directories/banks/api/banks.api.ts","pages/directories/banks/lib/getBanksColumns.tsx","pages/directories/banks/lib/getCreatedFields.tsx","pages/directories/banks/lib/useBankActions.ts","pages/directories/banks/index.tsx"],"sourcesContent":["import { commonApi } from \"@store/common.api\"\r\nimport { Bank } from \"../models\"\r\n\r\nexport const banksApi = commonApi.injectEndpoints({\r\n    endpoints: build => ({\r\n        fetchBanks: build.query<Bank[], string>({\r\n            query: () => ({\r\n                url: '/directoriesBanks',\r\n            }),\r\n            providesTags: [{ type: 'Banks', id: 'LIST' }],\r\n        }),\r\n        createBank: build.mutation<Bank, Omit<Bank, 'id'>>({\r\n            query: (created) => ({\r\n                url: '/directoriesBanks',\r\n                method: 'POST',\r\n                body: created,\r\n            }),\r\n            //pessimistic update - after fulfilled query\r\n            onQueryStarted(_, { dispatch, queryFulfilled }) {\r\n                queryFulfilled\r\n                    .then(({ data }) => {\r\n                        dispatch(\r\n                            banksApi.util.updateQueryData('fetchBanks', '', draft => {\r\n                                draft.push(data)\r\n                            })\r\n                        )\r\n                    })\r\n            },\r\n        }),\r\n        updateBank: build.mutation<Bank, Bank>({\r\n            query: (updated) => ({\r\n                url: `/directoriesBanks/${updated.id}`,\r\n                method: 'PUT',\r\n                body: updated,\r\n            }),\r\n            //pessimistic update - after fulfilled query\r\n            onQueryStarted(_, { dispatch, queryFulfilled }) {\r\n                queryFulfilled\r\n                    .then(({ data }) => {\r\n                        dispatch(\r\n                            banksApi.util.updateQueryData('fetchBanks', '', draft => {\r\n                                let founded = draft.find(founded => founded.id === data.id)\r\n                                !!founded && Object.assign(founded, data)\r\n                            })\r\n                        )\r\n                    })\r\n            },\r\n        }),\r\n        deleteBank: build.mutation<{}, number>({\r\n            query: (id) => ({\r\n                url: `/directoriesBanks/${id}`,\r\n                method: 'DELETE',\r\n            }),\r\n            //refetch\r\n            invalidatesTags: [{ type: 'Banks', id: 'LIST' }],\r\n        }),\r\n    }),\r\n})\r\n\r\nexport const {\r\n    useCreateBankMutation,\r\n    useDeleteBankMutation,\r\n    useFetchBanksQuery,\r\n    useUpdateBankMutation\r\n} = banksApi","import moment from \"moment\"\r\nimport { CustomColumnType } from \"@components/smartTable/lib/types\"\r\nimport { Bank } from \"../models\"\r\n\r\nconst getBanksColumns = (): CustomColumnType<Bank>[] => ([\r\n    {\r\n        title: 'Название',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        customFilter: 'search',\r\n        sorter: (a, b) => a.name.localeCompare(b.name),\r\n        editable: true,\r\n        width: 300,\r\n    },\r\n    {\r\n        title: 'БИК',\r\n        dataIndex: 'BIK',\r\n        key: 'BIK',\r\n        customFilter: 'search',\r\n        align: 'center',\r\n        sorter: (a, b) => a.BIK.localeCompare(b.BIK),\r\n        editable: true,\r\n        width: 150,\r\n    },\r\n    {\r\n        title: 'ИНН',\r\n        dataIndex: 'INN',\r\n        key: 'INN',\r\n        customFilter: 'search',\r\n        align: 'center',\r\n        sorter: (a, b) => a.INN.localeCompare(b.INN),\r\n        editable: true,\r\n        width: 150,\r\n    },\r\n    {\r\n        title: 'Дневной лимит',\r\n        dataIndex: 'dayLimit',\r\n        key: 'dayLimit',\r\n        customFilter: 'slider',\r\n        align: 'center',\r\n        sorter: (a, b) => a.dayLimit - b.dayLimit,\r\n        editable: true,\r\n        editType: 'number',\r\n        width: 150,\r\n    },\r\n    {\r\n        title: 'Месячный лимит',\r\n        dataIndex: 'monthLimit',\r\n        key: 'monthLimit',\r\n        customFilter: 'slider',\r\n        align: 'center',\r\n        sorter: (a, b) => a.monthLimit - b.monthLimit,\r\n        editable: true,\r\n        editType: 'number',\r\n        width: 150,\r\n    },\r\n    {\r\n        title: 'Корреспондентский счет',\r\n        dataIndex: 'cor_account',\r\n        key: 'cor_account',\r\n        customFilter: 'search',\r\n        align: 'center',\r\n        sorter: (a, b) => a.cor_account.localeCompare(b.cor_account),\r\n        editable: true,\r\n        width: 200,\r\n    },\r\n    {\r\n        title: 'Кем создано',\r\n        dataIndex: ['created_by', 'name'],\r\n        key: 'created_by',\r\n        customFilter: 'search',\r\n        align: 'center',\r\n        sorter: (a, b) => a.created_by.name.localeCompare(b.created_by.name),\r\n        width: 150,\r\n        responsive: ['xl'],\r\n        editable: false,\r\n    },\r\n    {\r\n        title: 'Когда создано',\r\n        dataIndex: 'created_date',\r\n        key: 'created_date',\r\n        customFilter: 'date-picker',\r\n        render: (value) => (!!value ? moment(value).format('L') : '-'),\r\n        sorter: (a, b) => moment(a.created_date).diff(b.created_date),\r\n        align: 'center',\r\n        width: 150,\r\n        responsive: ['xl'],\r\n        editable: false,\r\n    },\r\n    {\r\n        title: 'Кем изменено',\r\n        dataIndex: ['updated_by', 'name'],\r\n        key: 'updated_by',\r\n        customFilter: 'search',\r\n        align: 'center',\r\n        sorter: (a, b) => a.updated_by?.name.localeCompare(b.updated_by?.name ?? '') ?? 0,\r\n        render: (value) => value ?? '-',\r\n        width: 150,\r\n        responsive: ['xxl'],\r\n        editable: false,\r\n    },\r\n    {\r\n        title: 'Когда изменено',\r\n        dataIndex: 'updated_date',\r\n        key: 'updated_date',\r\n        customFilter: 'date-picker',\r\n        render: (value) => (!!value ? moment(value).format('L LT') : '-'),\r\n        sorter: (a, b) => moment(a.updated_date).diff(b.updated_date),\r\n        align: 'center',\r\n        width: 150,\r\n        responsive: ['xxl'],\r\n        editable: false,\r\n    },\r\n])\r\n\r\nexport default getBanksColumns","import React from 'react'\r\nimport { FormItemProps, Input, InputNumber } from 'antd'\r\n\r\nconst getCreatedFields = (name: number): (FormItemProps & { key: React.Key })[] => [\r\n    {\r\n        key: \"name\",\r\n        name: [name, 'name'],\r\n        style: { minWidth: 150, flexGrow: 1 },\r\n        rules: [{ required: true, message: 'Введите название' }],\r\n        children: <Input placeholder=\"Название\" />\r\n    },\r\n    {\r\n        key: \"BIK\",\r\n        name: [name, 'BIK'],\r\n        style: { width: 100 },\r\n        rules: [{ required: true, message: 'Введите данные' }],\r\n        children: <Input placeholder=\"БИК\" />\r\n    },\r\n    {\r\n        key: \"INN\",\r\n        name: [name, 'INN'],\r\n        style: { width: 100 },\r\n        rules: [{ required: true, message: 'Введите данные' }],\r\n        children: <Input placeholder=\"ИНН\" />\r\n    },\r\n    {\r\n        key: \"dayLimit\",\r\n        name: [name, 'dayLimit'],\r\n        style: { width: 100 },\r\n        rules: [{ required: true, message: 'Введите данные' }],\r\n        children: <InputNumber  placeholder=\"Дневной лимит\" />\r\n    },\r\n    {\r\n        key: \"monthLimit\",\r\n        name: [name, 'monthLimit'],\r\n        style: { width: 100 },\r\n        rules: [{ required: true, message: 'Введите данные' }],\r\n        children: <InputNumber placeholder=\"Месячный лимит\" />\r\n    },\r\n    {\r\n        key: \"cor_account\",\r\n        name: [name, 'cor_account'],\r\n        style: { width: 200 },\r\n        rules: [{ required: true, message: 'Введите данные' }],\r\n        children: <Input placeholder=\"Корсчет\" />\r\n    },\r\n]\r\n\r\nexport default getCreatedFields","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useCallback } from \"react\"\r\nimport moment from \"moment\"\r\nimport { FormInstance, message } from \"antd\"\r\nimport { MutationDefinition } from \"@reduxjs/toolkit/dist/query\"\r\nimport { MutationTrigger } from \"@reduxjs/toolkit/dist/query/react/buildHooks\"\r\nimport { User } from \"@models/user\"\r\nimport { Bank, CreateBankValues } from \"../models\"\r\nimport { BaseDirectoryFields } from \"@models/base\"\r\n\r\ninterface Props {\r\n    user: User\r\n    createBank: MutationTrigger<MutationDefinition<Omit<Bank, \"id\">, any, any, Bank, string>>\r\n    deleteBank: MutationTrigger<MutationDefinition<number, any, any, {}, string>>\r\n    updateBank: MutationTrigger<MutationDefinition<Bank, any, any, Bank, string>>\r\n    editForm: FormInstance<any>\r\n    hideCreateModal: () => void\r\n    cancelEdit: () => void\r\n    selectedRowKeys: React.Key[]\r\n    setSelectedRowKeys: React.Dispatch<React.SetStateAction<React.Key[]>>\r\n}\r\n\r\nconst useBankActions = ({\r\n    user,\r\n    createBank,\r\n    deleteBank,\r\n    updateBank, \r\n    editForm, \r\n    hideCreateModal, \r\n    cancelEdit, \r\n    selectedRowKeys, \r\n    setSelectedRowKeys\r\n}: Props) => {\r\n    //Creating\r\n    const onCreate = useCallback((data: Omit<Bank, 'id'>) => \r\n        createBank(data), [])\r\n    const onGroupCreate = useCallback(async (values: CreateBankValues) => {\r\n        if (!!values.banks?.length) {\r\n            const initialData: Omit<BaseDirectoryFields, 'id' | 'name'> = {\r\n                type: \"geographyCountries\",\r\n                deleted: false,\r\n                created_by: user,\r\n                created_date: moment().toISOString(),\r\n                updated_by: null,\r\n                updated_date: null\r\n            }\r\n            return Promise.all(values.banks.map((bank) => onCreate({ ...initialData, ...bank }).unwrap()))\r\n                .then(() => {\r\n                    message.success('Данные успешно сохранены')\r\n                    hideCreateModal()\r\n                })\r\n        }\r\n    }, [user])\r\n\r\n    //Updating\r\n    const onUpdate = useCallback(async (record: Bank) => {\r\n        try {\r\n            await editForm.validateFields()\r\n            const data: Bank = { ...record, ...editForm.getFieldsValue() }\r\n            data.updated_by = user\r\n            data.updated_date = moment().toISOString()\r\n            await updateBank(data).unwrap()\r\n            message.success('Изменение успешно')\r\n            cancelEdit()\r\n        } catch {}\r\n    }, [user])\r\n\r\n    //Deleting\r\n    const onDelete = useCallback((id: number) => deleteBank(id), []) \r\n    const onGroupDelete = useCallback(async () => {\r\n        Promise.all(selectedRowKeys.map((id) => onDelete(Number(id)).unwrap()))\r\n            .then(() => {\r\n                message.success(`Удаление успешно`)\r\n                setSelectedRowKeys([])\r\n            })\r\n    }, [selectedRowKeys])\r\n\r\n    return {\r\n        onGroupCreate,\r\n        onUpdate,\r\n        onGroupDelete\r\n    }\r\n}\r\n\r\nexport default useBankActions","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useCallback, useMemo, } from 'react'\r\nimport { Alert, Form, Modal } from 'antd'\r\nimport {\r\n    useCreateBankMutation,\r\n    useDeleteBankMutation,\r\n    useFetchBanksQuery,\r\n    useUpdateBankMutation\r\n} from './api/banks.api'\r\n//lib & ui\r\nimport { CreateBankValues, Bank } from './models'\r\nimport getBanksColumns from './lib/getBanksColumns'\r\nimport getCreatedFields from './lib/getCreatedFields'\r\nimport useBankActions from './lib/useBankActions'\r\n//components\r\nimport { PageWrapper } from '@components/templates/PageWrapper'\r\nimport PageToolbar from '@components/templates/PageToolbar'\r\nimport SmartTable from '@components/smartTable'\r\nimport DynamicForm from '@components/templates/DynamicForm'\r\nimport { EditableCell } from '@components/smartTable/ui'\r\nimport { getEditColumns } from '@components/smartTable/lib/getEditColumns'\r\n//hooks\r\nimport useWindowSize from '@utils/hooks/useWindowSize'\r\nimport { useUser } from '@utils/hooks/useUser'\r\nimport { useTable } from '@utils/hooks/useTable'\r\nimport { useModal } from '@utils/hooks/useModal'\r\nimport { useEditRow } from '@utils/hooks/useEditRow'\r\n\r\nconst Page: React.FC = () => {\r\n    const user = useUser()\r\n    const { width, height } = useWindowSize()\r\n\r\n    //Queries & mutations\r\n    const { data, isLoading, isFetching, error } = useFetchBanksQuery('')\r\n    const [updateBank, { isLoading: updateLoading, error: updateError }] = useUpdateBankMutation()\r\n    const [createBank, { isLoading: createLoading, error: createError }] = useCreateBankMutation()\r\n    const [deleteBank, { isLoading: deleteLoading, error: deleteError }] = useDeleteBankMutation()\r\n    const dataError = error || updateError || createError || deleteError\r\n\r\n    //Creating modal\r\n    const [createModalVisible, showCreateModal, hideCreateModal] = useModal()\r\n    const createFields = useCallback(getCreatedFields, [])\r\n\r\n    //Table\r\n    const {\r\n        rowSelection, \r\n        selectedRowKeys, \r\n        setSelectedRowKeys,\r\n    } = useTable<Bank>()\r\n\r\n    const { edit, editForm, editingKey, isEditing, cancelEdit } = useEditRow<Bank>()\r\n\r\n    const scroll = useMemo(() => ({ y: height - 260 }), [height])\r\n    const pagination = useMemo(() => ({ onChange: cancelEdit, showSizeChanger: true }), [])\r\n    const components = useMemo(() => ({ body: { cell: EditableCell, } }), [])\r\n\r\n    const { onUpdate, onGroupCreate, onGroupDelete } = useBankActions({\r\n        user, editForm, cancelEdit, hideCreateModal, selectedRowKeys, setSelectedRowKeys,\r\n        createBank, deleteBank, updateBank\r\n    })\r\n\r\n    //Columns & data\r\n    const columns = useMemo(() =>\r\n        getEditColumns({\r\n            columns: getBanksColumns(),\r\n            cancelEdit,\r\n            edit,\r\n            editingKey,\r\n            isEditing,\r\n            loading: updateLoading,\r\n            onSave: onUpdate\r\n        }), [editingKey])\r\n    const dataSource = useMemo(() => data ?? [], [data])\r\n\r\n    return (\r\n        <PageWrapper>\r\n            <section className='main-section'>\r\n                <PageToolbar\r\n                    deleteDisable={!selectedRowKeys.length}\r\n                    deleteLoading={deleteLoading}\r\n                    onOpenCreate={showCreateModal}\r\n                    onDelete={onGroupDelete}\r\n                />\r\n                <Form form={editForm} component={false}>\r\n                    <SmartTable<Bank>\r\n                        components={components}\r\n                        columns={columns}\r\n                        dataSource={dataSource}\r\n                        rowSelection={rowSelection}\r\n                        loading={isFetching || isLoading}\r\n                        scroll={scroll}\r\n                        pagination={pagination}\r\n                    />\r\n                </Form>\r\n                {(!!dataError) && <Alert message={JSON.stringify(dataError)} type=\"error\"/>}\r\n            </section>\r\n            <Modal\r\n                width={1000}\r\n                open={createModalVisible}\r\n                title=\"Создать\"\r\n                centered\r\n                footer={null}\r\n                onCancel={hideCreateModal}\r\n            >\r\n                <DynamicForm<CreateBankValues>\r\n                    name='banks'\r\n                    getfields={createFields}\r\n                    loading={createLoading}\r\n                    error={createError}\r\n                    onFinish={onGroupCreate}\r\n                    width={width}\r\n                />\r\n            </Modal>\r\n        </PageWrapper>\r\n    )\r\n}\r\n\r\nexport default Page"],"names":["banksApi","commonApi","endpoints","build","fetchBanks","query","url","providesTags","type","id","createBank","mutation","created","method","body","onQueryStarted","_","dispatch","queryFulfilled","then","data","util","updateQueryData","draft","push","updateBank","updated","founded","find","Object","assign","deleteBank","invalidatesTags","useCreateBankMutation","useDeleteBankMutation","useFetchBanksQuery","useUpdateBankMutation","title","dataIndex","key","customFilter","sorter","a","b","name","localeCompare","editable","width","align","BIK","INN","dayLimit","editType","monthLimit","cor_account","created_by","responsive","render","value","moment","format","created_date","diff","updated_by","updated_date","style","minWidth","flexGrow","rules","required","message","children","placeholder","user","editForm","hideCreateModal","cancelEdit","selectedRowKeys","setSelectedRowKeys","onCreate","useCallback","onGroupCreate","values","banks","length","initialData","deleted","toISOString","Promise","all","map","bank","unwrap","onUpdate","record","validateFields","getFieldsValue","onDelete","onGroupDelete","Number","useUser","useWindowSize","height","isLoading","isFetching","error","updateLoading","updateError","createLoading","createError","deleteLoading","deleteError","dataError","useModal","createModalVisible","showCreateModal","createFields","getCreatedFields","useTable","rowSelection","useEditRow","edit","editingKey","isEditing","scroll","useMemo","y","pagination","onChange","showSizeChanger","components","cell","EditableCell","useBankActions","columns","getEditColumns","getBanksColumns","loading","onSave","dataSource","PageWrapper","className","PageToolbar","deleteDisable","onOpenCreate","form","component","JSON","stringify","open","centered","footer","onCancel","DynamicForm","getfields","onFinish"],"sourceRoot":""}