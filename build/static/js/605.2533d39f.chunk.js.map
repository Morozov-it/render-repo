{"version":3,"file":"static/js/605.2533d39f.chunk.js","mappings":"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","sources":["components/controllers/RubInput.tsx","components/controllers/CatalogSelect.tsx","utils/recursionObjectSearch.ts","components/smartTable/lib/getTableCustomFilter.tsx","components/smartTable/index.tsx","components/smartTable/lib/getEditColumns.tsx","components/smartTable/ui/DropdownDatepicker.tsx","components/smartTable/ui/DropdownSlider.tsx","components/smartTable/ui/DropdownSearch.tsx","components/smartTable/ui/EditableCell.tsx","components/smartTable/ui/EditButtons.tsx","../node_modules/@ant-design/icons-svg/es/asn/MinusCircleOutlined.js","../node_modules/@ant-design/icons/es/icons/MinusCircleOutlined.js","components/templates/DynamicForm.tsx","models/user.ts","components/templates/PageToolbar.tsx","components/templates/PageWrapper.tsx","utils/hooks/useEditRow.tsx","utils/hooks/useModal.ts","utils/hooks/useTable.ts","utils/hooks/useUser.ts","utils/parseBigValue.ts"],"sourcesContent":["import React from 'react'\r\nimport { InputNumber, InputNumberProps } from 'antd'\r\n\r\nconst RubInput: React.FC<InputNumberProps> = (props) => {\r\n    return (\r\n        <InputNumber\r\n            {...props}\r\n            prefix=\"₽\"\r\n            style={{ width: '100%' }}\r\n            step={1000}\r\n            formatter={value => String(value).replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ')}\r\n            parser={value => Number(value!.replace(/\\s/g, ''))} />\r\n    )\r\n}\r\n\r\nexport default React.memo(RubInput)","\r\nimport React from 'react'\r\nimport { Select, SelectProps } from 'antd'\r\nimport { Catalog } from '@models/base'\r\n\r\nconst CatalogSelect: React.FC<SelectProps & { catalog?: Catalog[]}> = ({ catalog, ...props }) => {\r\n    return (\r\n        <Select\r\n            placeholder=\"выбрать\"\r\n            allowClear\r\n            showSearch\r\n            optionFilterProp=\"children\"\r\n            filterOption={(input, option) =>\r\n                (option!.children as unknown as string).toLowerCase().includes(input.toLowerCase())}\r\n            filterSort={(optionA, optionB) =>\r\n                (optionA!.children as unknown as string)\r\n                    .toLowerCase()\r\n                    .localeCompare((optionB!.children as unknown as string).toLowerCase())\r\n            }\r\n            {...props}\r\n        >\r\n            {catalog?.map((item) => (\r\n                <Select.Option key={item.id} value={item.id}>{item.name}</Select.Option>\r\n            ))}\r\n        </Select>\r\n    )\r\n}\r\n\r\nexport default React.memo(CatalogSelect)","import { DataIndex } from 'rc-table/lib/interface'\r\n\r\nconst recursionObjectSearch = (obj: Record<string, any>, keys?: DataIndex): string => {\r\n    if (!keys) return ''\r\n\r\n    if (!Array.isArray(keys)) {\r\n        return obj[keys as string] ?? ''\r\n    }\r\n\r\n    const tempKeys = [...keys]\r\n    for (let i = 0; i < tempKeys.length; i++) {\r\n        const key = tempKeys[i]\r\n        if (obj[key]) {\r\n            const entity = obj[key]\r\n            if (tempKeys.length === 1) {\r\n                return entity\r\n            }\r\n            tempKeys.shift()\r\n            return recursionObjectSearch(entity, tempKeys)\r\n        }\r\n    }\r\n    return ''\r\n}\r\n\r\nexport default recursionObjectSearch\r\n","import React from 'react'\r\nimport { ColumnType } from 'antd/es/table'\r\nimport { CalendarOutlined, SearchOutlined, SlidersOutlined } from '@ant-design/icons'\r\nimport { DataIndex } from 'rc-table/lib/interface'\r\nimport { Moment } from 'moment'\r\nimport { FilterDropdownProps } from 'antd/lib/table/interface'\r\nimport { DropdownDatepicker, DropdownSlider, DropdownSearch } from '../ui'\r\nimport { CustomTableFilter, InitialSliderValues } from './types'\r\nimport recursionObjectSearch from '@utils/recursionObjectSearch'\r\n\r\nconst onSearchFilter =\r\n    (dataIndex?: DataIndex): ColumnType<any>['onFilter'] =>\r\n    (value, record) => {\r\n        const string = recursionObjectSearch(record, dataIndex ?? '').toLowerCase()\r\n\r\n        return !!value\r\n            ? string?.includes(value.toString().toLowerCase())\r\n            : true\r\n    }\r\n\r\nconst onDatePickerFilter =\r\n    (dataIndex?: DataIndex): ColumnType<any>['onFilter'] =>\r\n    (value, record) => {\r\n        const date = recursionObjectSearch(record, dataIndex ?? '')\r\n\r\n        return !!value\r\n            ? (value as unknown as Moment[])[0]?.isSameOrBefore(date) &&\r\n                    (value as unknown as Moment[])[1]?.isSameOrAfter(date)\r\n            : true\r\n    }\r\n\r\nconst onSliderFilter =\r\n    (dataIndex?: DataIndex): ColumnType<any>['onFilter'] =>\r\n    (value, record) => {\r\n        const number = recursionObjectSearch(record, dataIndex ?? '')\r\n\r\n        return !!value\r\n            ? (value as unknown as number[])[0] <= Number(number) && Number(number) <= (value as unknown as number[])[1]\r\n            : true\r\n    }\r\n\r\nconst getTableCustomFilter = (\r\n    dataIndex?: DataIndex,\r\n    customFilter?: CustomTableFilter,\r\n    initialSliderValues?: InitialSliderValues,\r\n): ColumnType<any> => {\r\n    switch (customFilter) {\r\n        case 'date-picker': \r\n            return {\r\n                filterDropdown: (props: FilterDropdownProps) => <DropdownDatepicker {...props} />,\r\n                filterIcon: <CalendarOutlined />,\r\n                onFilter: onDatePickerFilter(dataIndex),\r\n            }\r\n        case 'slider':\r\n            return {\r\n                filterDropdown: (props: FilterDropdownProps) => <DropdownSlider {...props} {...initialSliderValues} />,\r\n                filterIcon: <SlidersOutlined />,\r\n                onFilter: onSliderFilter(dataIndex),\r\n            }\r\n        case 'search':\r\n            return {\r\n                filterDropdown: (props: FilterDropdownProps) => <DropdownSearch {...props} />,\r\n                filterIcon: <SearchOutlined />,\r\n                onFilter: onSearchFilter(dataIndex),\r\n            }\r\n        default:\r\n            return {}\r\n    }\r\n}\r\n\r\nexport default getTableCustomFilter\r\n","import React, { useMemo } from 'react'\r\nimport { Table as AntdTable } from 'antd'\r\nimport { TableProps } from 'antd/lib/table/Table'\r\nimport styled from 'styled-components'\r\nimport getTableCustomFilter from './lib/getTableCustomFilter'\r\nimport { CustomColumnType } from './lib/types'\r\n\r\nconst StyledTable = styled(AntdTable)`\r\n    width: 100%;\r\n    height: 100%;\r\n    .row-selected,\r\n    .row-selected:hover {\r\n        transition: 0.1s;\r\n    }\r\n    .ant-table-thead > tr > th, \r\n    .ant-table-tbody > tr > td, \r\n    .ant-table tfoot > tr > th, \r\n    .ant-table tfoot > tr > td {\r\n        padding: 8px 12px;\r\n    }\r\n` as typeof Table\r\n\r\ntype Props<RecordType> = Omit<TableProps<RecordType>, 'columns' | 'dataSource'> & {\r\n    columns: CustomColumnType<RecordType>[]\r\n    dataSource: RecordType[]\r\n}\r\n\r\nconst Table = <RecordType,>({ columns, ...other }: Props<RecordType>) => {\r\n    const customColumns = useMemo(() => {\r\n        const p = columns?.map((col) => ({\r\n            ...col,\r\n            ...(col?.customFilter\r\n                ? getTableCustomFilter(col?.dataIndex, col?.customFilter, col?.initialSliderValues)\r\n                : null),\r\n        }))\r\n\r\n        return p\r\n    }, [columns])\r\n\r\n    return (\r\n        <StyledTable\r\n            {...other}\r\n            rowKey={'id'}\r\n            columns={customColumns}\r\n            bordered\r\n        />\r\n    )\r\n}\r\n\r\nexport default React.memo(Table) as typeof Table","import React from 'react'\r\nimport { CustomColumnType } from \"./types\"\r\nimport { EditButtons } from \"../ui\"\r\nimport { Tooltip } from 'antd'\r\nimport { HolderOutlined } from '@ant-design/icons'\r\n\r\ninterface Props<T> {\r\n    columns: CustomColumnType<T>[]\r\n    isEditing: (key: React.Key) => boolean\r\n    edit: (record: T) => void\r\n    editingKey: React.Key\r\n    cancelEdit: () => void\r\n    loading: boolean\r\n    onSave: (record: T) => Promise<void>\r\n}\r\n\r\nexport const getEditColumns = <T extends { id: React.Key },>({\r\n    columns,\r\n    edit,\r\n    editingKey,\r\n    isEditing,\r\n    cancelEdit,\r\n    loading,\r\n    onSave\r\n}: Props<T>): CustomColumnType<T>[] => [\r\n    {\r\n        title: <Tooltip title='Действия'><HolderOutlined /></Tooltip>,\r\n        align: 'center',\r\n        key: 'operations',\r\n        width: 100,\r\n        fixed: 'left',\r\n        render: (_, record) =>\r\n            <EditButtons\r\n                edit={edit}\r\n                cancelEdit={cancelEdit}\r\n                editable={isEditing(record.id)}\r\n                editingKey={editingKey}\r\n                loading={loading}\r\n                record={record}\r\n                save={onSave}\r\n            />,\r\n    },\r\n    ...(columns\r\n        .map((col) => ({\r\n            ...col,\r\n            ...(col?.editable\r\n                ? {\r\n                    onCell: (record: T) => ({\r\n                        record,\r\n                        inputType: col?.editType,\r\n                        catalog: col?.editCatalog,\r\n                        dataIndex: col?.dataIndex,\r\n                        title: col?.title,\r\n                        editing: isEditing(record.id),\r\n                    })\r\n                }\r\n                : null),\r\n        } as CustomColumnType<T>)))\r\n    //enable deleting non-editable columns .filter((col) => editingKey !== '' ? col.editable : true))\r\n]","/* eslint-disable no-useless-computed-key */\r\nimport React from 'react'\r\nimport moment from 'moment'\r\nimport { DatePicker } from 'antd'\r\nimport { FilterDropdownProps } from 'antd/lib/table/interface'\r\n\r\nconst DropdownDatePicker = (props: FilterDropdownProps) => {\r\n    const handleChange = (value: any) => {\r\n        props.setSelectedKeys([value])\r\n        props.confirm()\r\n        if (!value && props.clearFilters) {\r\n            props.clearFilters()\r\n            props.confirm()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <DatePicker.RangePicker\r\n            format=\"DD.MM.YYYY\"\r\n            placeholder={['от', 'до']}\r\n            onChange={handleChange}\r\n            ranges={{\r\n                ['сегодня']: [moment(), moment()],\r\n                ['неделя']: [moment(), moment().add(1, 'week')],\r\n                ['месяц']: [moment(), moment().add(1, 'month')],\r\n                ['год']: [moment(), moment().add(1, 'year')],\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default React.memo(DropdownDatePicker)\r\n","import React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Slider, Space } from 'antd'\r\nimport { FilterDropdownProps } from 'antd/lib/table/interface'\r\nimport parseBigValue from '@utils/parseBigValue'\r\nimport { SliderMarks } from 'antd/lib/slider'\r\nimport { InitialSliderValues } from '../lib/types'\r\n\r\ntype CustomFilterDropdownProps = FilterDropdownProps & InitialSliderValues\r\n\r\nconst DropdownSlider = ({\r\n    setSelectedKeys,\r\n    confirm,\r\n    clearFilters,\r\n    min = 0,\r\n    max = 100,\r\n    step = 10,\r\n    symbol = '',\r\n}: CustomFilterDropdownProps) => {\r\n    const [value, setValue] = useState<[number, number]>([min, max])\r\n\r\n    const marks: SliderMarks = useMemo(\r\n        () => ({\r\n            0: {\r\n                style: { left: '0%', transform: 'translateX(0%)', whiteSpace: 'nowrap' },\r\n                label: parseBigValue(min, 3) + symbol,\r\n            },\r\n            100: {\r\n                style: { left: '100%', transform: 'translateX(-100%)', whiteSpace: 'nowrap' },\r\n                label: parseBigValue(max, 3) + symbol,\r\n            },\r\n        }),\r\n        [max, min, symbol],\r\n    )\r\n\r\n    const formatter = useCallback((value?: number) => parseBigValue(value ?? 0, 3) + symbol, [symbol])\r\n\r\n    const handleSearch = (value: any) => {\r\n        setSelectedKeys([value])\r\n        confirm()\r\n    }\r\n\r\n    const handleReset = () => {\r\n        clearFilters && clearFilters()\r\n        confirm()\r\n        setValue([min, max])\r\n    }\r\n\r\n    return (\r\n        <div style={{ padding: 8 }}>\r\n            <Slider\r\n                min={min}\r\n                max={max}\r\n                step={step}\r\n                range={{ draggableTrack: true }}\r\n                tooltip={{ formatter }}\r\n                marks={marks}\r\n                value={value}\r\n                onChange={(value: [number, number]) => setValue([...value])}\r\n                style={{ marginBottom: 30, display: 'block' }}\r\n            />\r\n            <Space>\r\n                <Button type=\"primary\" onClick={() => handleSearch(value)} size=\"small\" style={{ width: 200 }}>\r\n                    OK\r\n                </Button>\r\n                <Button onClick={handleReset} size=\"small\" style={{ width: 200 }}>\r\n                    Сбросить\r\n                </Button>\r\n            </Space>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(DropdownSlider)\r\n","import React from 'react'\r\nimport { Button, Input, Space } from 'antd'\r\nimport { FilterDropdownProps } from 'antd/lib/table/interface'\r\nimport { SearchOutlined } from '@ant-design/icons'\r\n\r\nconst DropdownSearch = ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: FilterDropdownProps) => {\r\n    const handleSearch = (selectedKeys: React.Key[], confirm: () => void) => {\r\n        confirm()\r\n    }\r\n\r\n    const handleReset = (clearFilters: () => void, confirm: () => void) => {\r\n        clearFilters()\r\n        handleSearch([], confirm)\r\n    }\r\n\r\n    return (\r\n        <div style={{ padding: 8 }}>\r\n            <Input\r\n                placeholder={'Поиск'}\r\n                value={selectedKeys[0]}\r\n                onChange={(e) => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n                onPressEnter={() => handleSearch(selectedKeys, confirm)}\r\n                style={{ marginBottom: 8, display: 'block' }}\r\n            />\r\n            <Space>\r\n                <Button\r\n                    type=\"primary\"\r\n                    onClick={() => handleSearch(selectedKeys, confirm)}\r\n                    icon={<SearchOutlined />}\r\n                    size=\"small\"\r\n                    style={{ width: 90 }}\r\n                >\r\n                    Поиск\r\n                </Button>\r\n                <Button\r\n                    onClick={() => clearFilters && handleReset(clearFilters, confirm)}\r\n                    size=\"small\"\r\n                    style={{ width: 90 }}\r\n                >\r\n                    Сбросить\r\n                </Button>\r\n            </Space>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(DropdownSearch)","import React from 'react'\r\nimport { Form, Input, InputNumber } from 'antd'\r\nimport { CatalogSelect } from '@components/controllers'\r\nimport { Catalog } from '@models/base'\r\nimport { EditType } from '../lib/types'\r\n\r\ninterface EditableCellProps extends React.HTMLAttributes<HTMLElement> {\r\n    editing: boolean\r\n    dataIndex: string\r\n    title: any\r\n    inputType: EditType\r\n    record: any\r\n    index: number\r\n    children: React.ReactNode\r\n    catalog?: Catalog[]\r\n}\r\n\r\nconst EditableCell: React.FC<EditableCellProps> = ({\r\n    editing,\r\n    dataIndex,\r\n    title,\r\n    inputType,\r\n    record,\r\n    index,\r\n    children,\r\n    catalog,\r\n    ...restProps\r\n}) => {\r\n    const inputNode = () => {\r\n        switch (inputType) {\r\n            case 'number':\r\n                return <InputNumber />\r\n            case 'select':\r\n                return <CatalogSelect catalog={catalog} />\r\n            case 'text':\r\n                return <Input />\r\n            default:\r\n                return <Input />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <td {...restProps}>\r\n            {editing ? (\r\n            <Form.Item\r\n                name={dataIndex}\r\n                style={{ margin: 0 }}\r\n                rules={[\r\n                {\r\n                    required: true,\r\n                    message: 'Введите данные',\r\n                },\r\n                ]}\r\n            >\r\n                {inputNode()}\r\n            </Form.Item>\r\n            ) : (\r\n            children\r\n            )}\r\n        </td>\r\n    )\r\n}\r\n\r\nexport default React.memo(EditableCell)","import React from 'react'\r\nimport { CloseOutlined, EditOutlined, SaveOutlined } from \"@ant-design/icons\"\r\nimport { Button, Popconfirm, Space, Tooltip } from \"antd\"\r\n\r\ninterface Props<T> {\r\n    editable: boolean\r\n    editingKey: React.Key\r\n    save: (record: T) => Promise<void>\r\n    cancelEdit: () => void\r\n    edit: (record: T) => void\r\n    loading: boolean\r\n    record: T\r\n}\r\n\r\nconst EditButtons = <T,>({ editable, edit, cancelEdit, editingKey, loading, save, record }: Props<T>) => {\r\n    return editable ? (\r\n        <Space>\r\n            <Popconfirm\r\n                title=\"Вы точно хотите сохранить изменения?\"\r\n                onConfirm={() => save(record)}\r\n            >\r\n                <Tooltip title='Сохранить'>\r\n                    <Button loading={loading} icon={<SaveOutlined />} />\r\n                </Tooltip>\r\n            </Popconfirm>\r\n            <Tooltip title='Отменить'>\r\n                <Button onClick={cancelEdit} icon={<CloseOutlined />} />\r\n            </Tooltip>\r\n        </Space>\r\n    ) : (\r\n        <Tooltip title='Изменить'>\r\n            <Button\r\n                disabled={editingKey !== ''}\r\n                onClick={() => edit(record)}\r\n                icon={<EditOutlined />}\r\n            />\r\n        </Tooltip>\r\n    )\r\n}\r\n\r\nexport default React.memo(EditButtons) as typeof EditButtons","// This icon file is generated automatically.\nvar MinusCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M696 480H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h368c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }] }, \"name\": \"minus-circle\", \"theme\": \"outlined\" };\nexport default MinusCircleOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport MinusCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/MinusCircleOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar MinusCircleOutlined = function MinusCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: MinusCircleOutlinedSvg\n  }));\n};\n\nMinusCircleOutlined.displayName = 'MinusCircleOutlined';\nexport default /*#__PURE__*/React.forwardRef(MinusCircleOutlined);","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useCallback } from 'react'\r\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons'\r\nimport { Alert, Button, Form, FormItemProps, Space } from 'antd'\r\nimport { BaseCatalogs } from '@models/base'\r\nimport styled from 'styled-components'\r\n\r\nconst Wrapper = styled.div<{\r\n    width: number\r\n}>`\r\n    margin-bottom: 8;\r\n    display: flex;\r\n    gap: 8px;\r\n    align-items: baseline;\r\n    flex-wrap: ${({ width }) => width < 800 ? 'wrap' : 'nowrap'};\r\n`\r\n\r\ninterface Props<T> {\r\n    name: string\r\n    getfields: (name: number, catalogs?: BaseCatalogs) => (FormItemProps & { key: React.Key })[]\r\n    loading: boolean\r\n    error: any\r\n    onFinish: (values: T) => Promise<void>\r\n    width: number\r\n    catalogs?: BaseCatalogs\r\n}\r\n\r\nconst DynamicForm = <T,>({ name, getfields, loading, error, onFinish, width, catalogs }: Props<T>) => {\r\n    const [form] = Form.useForm()\r\n    const formFields = useCallback((name: number) => getfields(name, catalogs), [catalogs])\r\n\r\n    const onReset = useCallback(() => form.resetFields(), [form])\r\n\r\n    const handleFinish = useCallback((values: T) => {\r\n        onFinish(values).then(onReset)\r\n    }, [onFinish, onReset])\r\n    \r\n    return (\r\n        <Form\r\n            form={form}\r\n            onFinish={handleFinish}\r\n            onReset={onReset}\r\n            autoComplete=\"off\"\r\n        >\r\n            <Form.List name={name}>\r\n                {(fields, { add, remove }) => (\r\n                <>\r\n                    {fields.map(({ key, name }) => (\r\n                    <Wrapper width={width} key={key}>\r\n                        {formFields(name).map((props) => <Form.Item {...props} />)}\r\n                        <MinusCircleOutlined onClick={() => remove(name)} />\r\n                    </Wrapper>\r\n                    ))}\r\n                    <Form.Item>\r\n                        <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                            Добавить\r\n                        </Button>\r\n                    </Form.Item>\r\n                </>\r\n                )}\r\n            </Form.List>\r\n            {!!error && <Alert style={{marginBottom: '8px'}} message={error} type=\"error\" />}\r\n            <Form.Item>\r\n                <Space>\r\n                    <Button loading={loading} type=\"primary\" htmlType=\"submit\">\r\n                        Сохранить\r\n                    </Button>\r\n                    <Button htmlType=\"reset\">\r\n                        Очистить\r\n                    </Button>\r\n                </Space>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default React.memo(DynamicForm) as typeof DynamicForm","export interface User {\r\n    name: string\r\n    email: string\r\n    id: number\r\n}\r\n\r\nexport interface UserDTO {\r\n    email: string\r\n    password: string\r\n    name?: string\r\n}\r\n\r\nexport interface ResponseUserApi {\r\n    accessToken: string\r\n    user: User\r\n}\r\n\r\nexport type UserFilter = 'all' | 'user'\r\n\r\nexport enum UserFilterSelect {\r\n    all = 'Все',\r\n    user = 'Созданные мной'\r\n}","import React, { useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Popconfirm, Space } from 'antd'\r\nimport { DeleteOutlined, FileAddOutlined } from '@ant-design/icons'\r\nimport { CatalogSelect } from '@components/controllers'\r\nimport { UserFilter, UserFilterSelect } from '@models/user'\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    gap: 8px;\r\n    flex-wrap: wrap;\r\n`\r\n\r\ninterface Props {\r\n    onOpenCreate: () => void\r\n    deleteLoading: boolean\r\n    deleteDisable: boolean\r\n    onDelete: () => void\r\n    userFilter?: UserFilter\r\n    onChangeFilter?: (value: UserFilter) => void\r\n    userSelect?: boolean\r\n    children?: React.ReactNode\r\n}\r\n\r\nconst PageToolbar: React.FC<Props> = ({\r\n    onOpenCreate,\r\n    deleteLoading,\r\n    deleteDisable,\r\n    onDelete,\r\n    userFilter,\r\n    onChangeFilter,\r\n    userSelect = false,\r\n    children\r\n}) => {\r\n    const catalog = useMemo(() =>\r\n        Object.entries(UserFilterSelect).map(([value, name]) => ({ id: value, name }))\r\n    ,[])\r\n    return (\r\n        <Wrapper>\r\n            <Space wrap>\r\n                <Button onClick={onOpenCreate}>\r\n                    <FileAddOutlined />\r\n                    <span>Создать</span>\r\n                </Button>\r\n                <Popconfirm\r\n                    disabled={deleteDisable}\r\n                    placement=\"bottom\"\r\n                    title=\"Вы точно хотите это удалить?\"\r\n                    onConfirm={onDelete}\r\n                    okText=\"Да\"\r\n                    cancelText=\"Нет\"\r\n                >\r\n                    <Button\r\n                        loading={deleteLoading}\r\n                        disabled={deleteDisable}>\r\n                        <DeleteOutlined />\r\n                        <span>Удалить</span>\r\n                    </Button>\r\n                </Popconfirm>\r\n                {children}\r\n            </Space>\r\n            {userSelect &&\r\n                <CatalogSelect\r\n                    catalog={catalog}\r\n                    defaultValue={userFilter}\r\n                    style={{ width: 155 }}\r\n                    onChange={onChangeFilter}\r\n                    allowClear={false}\r\n                />\r\n            }\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default React.memo(PageToolbar)","import styled from \"styled-components\"\r\n\r\nexport const PageWrapper = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    .main-section {\r\n        height: 100%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 8px;\r\n    }\r\n`","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useCallback, useState } from \"react\"\r\nimport { Form } from \"antd\"\r\n\r\nexport const useEditRow = <T extends { id: React.Key },>() => {\r\n    //Editing\r\n    const [editForm] = Form.useForm()\r\n    const [editingKey, setEditingKey] = useState<React.Key>('')\r\n    const isEditing = useCallback((key: React.Key) => key === editingKey, [editingKey])\r\n    const edit = useCallback((record: T) => {\r\n        editForm.setFieldsValue({ ...record })\r\n        setEditingKey(record.id)\r\n    }, [])\r\n    const cancelEdit = useCallback(() => {\r\n        setEditingKey('')\r\n        editForm.resetFields()\r\n    }, [])\r\n\r\n    return {\r\n        editForm,\r\n        editingKey,\r\n        isEditing,\r\n        edit,\r\n        cancelEdit\r\n    }\r\n}","import { useCallback, useState } from \"react\"\r\n\r\nexport const useModal = () => {\r\n    const [isModalVisible, setIsModalVisible] = useState<boolean>(false)\r\n    const showModal = useCallback(() => setIsModalVisible(true), [])\r\n    const hideModal = useCallback(() => setIsModalVisible(false), [])\r\n\r\n    return [\r\n        isModalVisible,\r\n        showModal,\r\n        hideModal\r\n    ] as [boolean, () => void, () => void]\r\n}","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useCallback, useMemo, useState } from \"react\"\r\n\r\nexport const useTable = <T,>() => {\r\n    //SelectedItem\r\n    const [selectedItem, setSelectedItem] = useState<T | null>(null)\r\n    const changeSelectedItem = useCallback((value: T) => setSelectedItem(value), [])\r\n    const resetSelectedItem = useCallback(() => setSelectedItem(null), [])\r\n\r\n    //Row selection\r\n    const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([])\r\n    const onSelectChange = useCallback((newSelectedRowKeys: React.Key[]) => {\r\n        setSelectedRowKeys(newSelectedRowKeys)\r\n    }, [])\r\n\r\n    const rowSelection = useMemo(() => ({\r\n        selectedRowKeys,\r\n        onChange: onSelectChange,\r\n    }), [onSelectChange, selectedRowKeys])\r\n\r\n    const onRowClick = useCallback((record: T) => ({ onClick: () => changeSelectedItem(record) }), [])\r\n\r\n    return {\r\n        selectedItem,\r\n        changeSelectedItem,\r\n        resetSelectedItem,\r\n        selectedRowKeys,\r\n        setSelectedRowKeys,\r\n        rowSelection,\r\n        onRowClick,\r\n    }\r\n}","import { User } from \"@models/user\"\r\nimport { useAppSelector } from \"@store/store\"\r\n\r\nexport const useUser = () => {\r\n    const user = useAppSelector((state) => ({\r\n        id: state.user.id,\r\n        name: state.user.name,\r\n        email: state.user.email,\r\n    } as User))\r\n\r\n    return user\r\n}","const parseBigValue = (value: number | string, bitCount: number, fixedDecimal = -1): string => {\r\n    if (!value) {\r\n        return '0'\r\n    }\r\n    if (bitCount === 0) {\r\n        return value.toString()\r\n    }\r\n    let result = ''\r\n    let stringValue: string =\r\n        fixedDecimal === -1 || typeof value === 'string' ? value.toString() : value.toFixed(fixedDecimal)\r\n    while (!!stringValue) {\r\n        const choosedLastChars: string = stringValue.slice(-bitCount)\r\n        result = ' ' + choosedLastChars + result\r\n        const length: number = stringValue.length\r\n        stringValue = length - bitCount > 0 ? stringValue.slice(0, length - bitCount) : ''\r\n    }\r\n    return result.trim()\r\n}\r\n\r\nexport default parseBigValue\r\n"],"names":["RubInput","props","prefix","style","width","step","formatter","value","String","replace","parser","Number","React","CatalogSelect","catalog","placeholder","allowClear","showSearch","optionFilterProp","filterOption","input","option","children","toLowerCase","includes","filterSort","optionA","optionB","localeCompare","map","item","id","name","recursionObjectSearch","obj","keys","Array","isArray","tempKeys","i","length","key","entity","shift","onSearchFilter","dataIndex","record","string","toString","onDatePickerFilter","date","isSameOrBefore","isSameOrAfter","onSliderFilter","number","customFilter","initialSliderValues","filterDropdown","filterIcon","CalendarOutlined","onFilter","SlidersOutlined","SearchOutlined","StyledTable","styled","AntdTable","Table","columns","other","customColumns","useMemo","col","getTableCustomFilter","rowKey","bordered","getEditColumns","edit","editingKey","isEditing","cancelEdit","loading","onSave","title","align","fixed","render","_","editable","save","onCell","inputType","editType","editCatalog","editing","DropdownDatePicker","format","onChange","setSelectedKeys","confirm","clearFilters","ranges","moment","add","DropdownSlider","min","max","symbol","useState","setValue","marks","left","transform","whiteSpace","label","parseBigValue","useCallback","padding","range","draggableTrack","tooltip","marginBottom","display","type","onClick","handleSearch","size","DropdownSearch","selectedKeys","e","target","onPressEnter","icon","handleReset","EditableCell","index","restProps","margin","rules","required","message","inputNode","EditButtons","onConfirm","SaveOutlined","CloseOutlined","disabled","EditOutlined","MinusCircleOutlined","ref","AntdIcon","_objectSpread","MinusCircleOutlinedSvg","displayName","Wrapper","DynamicForm","getfields","error","onFinish","catalogs","Form","form","formFields","onReset","resetFields","handleFinish","values","then","autoComplete","fields","remove","block","PlusOutlined","htmlType","UserFilterSelect","PageToolbar","onOpenCreate","deleteLoading","deleteDisable","onDelete","userFilter","onChangeFilter","userSelect","Object","entries","wrap","FileAddOutlined","placement","okText","cancelText","DeleteOutlined","defaultValue","PageWrapper","useEditRow","editForm","setEditingKey","setFieldsValue","useModal","isModalVisible","setIsModalVisible","useTable","selectedItem","setSelectedItem","changeSelectedItem","resetSelectedItem","selectedRowKeys","setSelectedRowKeys","onSelectChange","newSelectedRowKeys","rowSelection","onRowClick","useUser","useAppSelector","state","user","email","bitCount","fixedDecimal","result","stringValue","toFixed","choosedLastChars","slice","trim"],"sourceRoot":""}